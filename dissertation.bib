@inproceedings{YZW17descry,
	title = {DESCRY: reproducing system-level concurrency failures},
	author = {Yu, Tingting and Zaman, Tarannum S and Wang, Chao},
	booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
	pages = {694--704},
	year = {2017},
	organization = {ACM}
}

@article{Shamshiri2018,
	abstract = {Achieving high structural coverage is an important aim in software testing. Several search-based techniques have proved successful at automatically generating tests that achieve high coverage. However, despite the well- established arguments behind using evolutionary search algorithms (e.g., genetic algorithms) in preference to random search, it remains an open question whether the benefits can actually be observed in practice when generating unit test suites for object-oriented classes. In this paper, we report an empirical study on the effects of using a genetic algorithm (GA) to generate test suites over generating test suites incrementally with random search, by applying the EvoSuite unit test suite generator to 1,000 classes randomly selected from the SF110 corpus of open source projects. Surprisingly, the results show little difference between the coverage achieved by test suites generated with evolutionary search compared to those generated using random search. A detailed analysis reveals that the genetic algorithm covers more branches of the type where standard fitness functions provide guidance. In practice, however, we observed that the vast majority of branches in the analyzed projects provide no such guidance.},
	author = {Shamshiri, Sina and Rojas, Jos{\'{e}} Miguel and Gazzola, Luca and Fraser, Gordon and McMinn, Phil and Mariani, Leonardo and Arcuri, Andrea},
	doi = {10.1002/stvr.1660},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Shamshiri et al. - 2018 - Random or evolutionary search for object-oriented test suite generation.pdf:pdf},
	isbn = {9781450334723},
	issn = {09600833},
	journal = {Software Testing, Verification and Reliability},
	keywords = {Automated software testing,Automated test generation,Chemical reaction optimization,Genetic algorithms,Random search,Search-based software testing},
	month = {jun},
	number = {4},
	pages = {e1660},
	title = {{Random or evolutionary search for object-oriented test suite generation?}},
	volume = {28},
	year = {2018}
}

@inproceedings{Hashim2005,
	abstract = {This paper presents an improvement to existing class test ordering stategies by including coupling measures to reduce non-determinism and decrease the number of stubs to be produced. Our novel strategy aims to lift the known methods from class hierarchies to component-based product lines in which so-called connectors between components are key entities for structuring, assembling and integrating software architectures, and in which tighter coupling of classes inside components and looser coupling between classes in different components are fundamental to component-based architecture composition. The paper also evaluates the new method and confirms the expected reductions in the number of stubs generated and the improved test ordering. Two recent test order strategies for C++ are compared with our novel approach through experiments conducted on two mini product lines written in Java. The new proposed test ordering strategy is more deterministic through measuring coupling, which is at the heart of component-based product line architectures. {\&}copy; 2005 IEEE.},
	author = {Hashim, N.L. and Schmidt, H.W. and Ramakrishnan, Sita},
	booktitle = {Fifth International Conference on Quality Software (QSIC'05)},
	doi = {10.1109/QSIC.2005.64},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Hashim, Schmidt, Ramakrishnan - 2005 - Test Order for Class-based Integration Testing of Java Applications.pdf:pdf},
	isbn = {0-7695-2472-9},
	issn = {15506002},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {11--18},
	publisher = {IEEE},
	title = {{Test Order for Class-based Integration Testing of Java Applications}},
	volume = {2005},
	year = {2005}
}

@inproceedings{Artzi2008,
	author = {Artzi, Shay and Kim, Sunghun and Ernst, Michael D.},
	title = {ReCrash: Making Software Failures Reproducible by Preserving Object States},
	booktitle = {Proceedings of the 22Nd European Conference on Object-Oriented Programming},
	series = {ECOOP '08},
	year = {2008},
	isbn = {978-3-540-70591-8},
	pages = {542--565},
	doi = {10.1007/978-3-540-70592-5_23},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	keywords = {Fault, bug, capture, crash, failure, object, replay, reproducing, test generation}
}

@inproceedings{Rossler2013,
	author = {R{\"{o}}{\ss}ler, Jeremias and Zeller, Andreas and Fraser, Gordon and Zamfir, Cristian and Candea, George},
	booktitle = {Proc. International Conference on Software Testing, Verification and Validation (ICST)},
	doi = {10.1109/ICST.2013.18},
	isbn = {978-0-7695-4968-2},
	issn = {2159-4848},
	pages = {114--123},
	publisher = {IEEE},
	title = {{Reconstructing core dumps}},
	year = {2013}
}

@article{Fraser2015a,
	author = {Fraser, Gordon and Arcuri, Andrea},
	doi = {10.1007/s10664-013-9299-z},
	journal = {EMSE},
	month = {jun},
	number = {3},
	pages = {783--812},
	publisher = {Springer},
	title = {{Achieving scalable mutation-based generation of whole test suites}},
	volume = {20},
	year = {2015}
}

@inproceedings{DBLP:conf/iwpc/WhiteVJBP15,
	author = {Martin White and
		Mario Linares V{\'{a}}squez and
		Peter Johnson and
		Carlos Bernal{-}C{\'{a}}rdenas and
		Denys Poshyvanyk},
	title = {Generating reproducible and replayable bug reports from Android application
		crashes},
	booktitle = {Proceedings of the 2015 {IEEE} 23rd International Conference on Program
		Comprehension, {ICPC} 2015, Florence/Firenze, Italy, May 16-24, 2015},
	pages = {48--59},
	year = {2015},
	crossref = {DBLP:conf/iwpc/2015},
	doi = {10.1109/ICPC.2015.14}
}

@misc{mavenDep,
	author = {{Apache Maven Project}},
	title = {{Introduction to the Dependency Mechanism}},
	howpublished = {\url{https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html}},
	year = {2018},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{Sim2003,
	author = {Sim, Susan Elliott and Easterbrook, Steve and Holt, Richard C},
	booktitle = {Proceedings of the 25th International Conference on Software Engineering},
	isbn = {0-7695-1877-X},
	pages = {74--83},
	publisher = {IEEE Computer Society},
	series = {ICSE '03},
	title = {{Using Benchmarking to Advance Research: A Challenge to Software Engineering}},
	year = {2003},
	address = {Portland, Oregon, USA}
}

@inproceedings{Alexander2000,
	author = {Alexander, R.T. and Offutt, A.J.},
	booktitle = {Proceedings 11th International Symposium on Software Reliability Engineering. ISSRE 2000},
	doi = {10.1109/ISSRE.2000.885857},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Alexander, Offutt - 2000 - Criteria for testing polymorphic relationships.pdf:pdf},
	isbn = {0-7695-0807-3},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {15--23},
	publisher = {IEEE Comput. Soc},
	title = {{Criteria for testing polymorphic relationships}},
	year = {2000}
}

@book{Baier2007,
	Author = {Baier, Christel and Katoen, Joost-Pieter},
	Isbn = {978-0-262-02649-9},
	Owner = {Maxime},
	Publisher = {MIT Press},
	Shelf = {F2},
	Timestamp = {2009.04.08},
	Title = {Principles of Model Checking},
	Year = {2007}
}

@inproceedings{MarkLoopFlag,
	title = {Evolutionary testing in the presence of loop-assigned flags: A testability transformation approach},
	author = {Baresel, Andr{\'e} and Binkley, David and Harman, Mark and Korel, Bogdan},
	booktitle = {ACM SIGSOFT Software Engineering Notes},
	volume = {29},
	pages = {108--118},
	year = {2004},
	publisher = {{ACM}},
	organization = {ACM},
	address = {Boston, Massachusetts, USA}
}

@inproceedings{Goldberg:1987,
	author = {Goldberg, David E. and Richardson, Jon},
	title = {Genetic Algorithms with Sharing for Multimodal Function Optimization},
	booktitle = {Proc. Int'l Conf. on Genetic Algorithms and Their Application},
	year = {1987},
	isbn = {0-8058-0158-8},
	location = {Cambridge, Massachusetts, USA},
	pages = {41--49},
	numpages = {9},
	-url = {http://dl.acm.org/citation.cfm?id=42512.42519},
	acmid = {42519},
	publisher = {L. Erlbaum Associates Inc.},
	-address = {Hillsdale, NJ, USA}
}

@inproceedings{Kracht2014,
	author = {Kracht, Jeshua S. and Petrovic, Jacob Z. and Walcott-Justice, Kristen R.},
	booktitle = {QSIC'14},
	doi = {10.1109/QSIC.2014.33},
	month = {oct},
	pages = {256--265},
	publisher = {IEEE},
	title = {{Empirically Evaluating the Quality of Automatically Generated and Manually Written Test Suites}},
	year = {2014}
}

@article{vcrepinvsek2013,
	author = {\v{C}repin\v{s}ek, Matej and Liu, Shih-Hsi and Mernik, Marjan},
	title = {Exploration and exploitation in evolutionary algorithms: A survey},
	year = {2013},
	issue_date = {June 2013},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {45},
	number = {3},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/2480741.2480752},
	journal = {ACM Comput. Surv.},
	numpages = {33}
}

@inproceedings{martinez2016astor,
	title = {Astor: A program repair library for java},
	author = {Martinez, Matias and Monperrus, Martin},
	booktitle = {Proceedings of the 25th International Symposium on Software Testing and Analysis},
	pages = {441--444},
	year = {2016},
	organization = {ACM}
}

@inproceedings{Weeratunge2010,
	author = {Weeratunge, Dasarath and Zhang, Xiangyu and Jagannathan, Suresh},
	title = {Analyzing Multicore Dumps to Facilitate Concurrency Bug Reproduction},
	booktitle = {Proceedings of the Fifteenth Edition of ASPLOS on Architectural Support for Programming Languages and Operating Systems},
	series = {ASPLOS XV},
	year = {2010},
	isbn = {978-1-60558-839-1},
	pages = {155--166},
	doi = {10.1145/1736020.1736039},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {concurrency bugs, execution indexing, multi-core, reproduction}
}

@inproceedings{DaVeigaCabral2010,
	abstract = {In the context of Object-Oriented software, many works have investigated the Class Integration and Test Order (CITO) problem, proposing solutions to determine test orders for the integration test of the program classes. The existing approaches based on graphs can generate solutions that are sub-optimal, and do not consider the different factors and measures that can affect the stubbing process. To overcome this limitation, solutions based on Genetic Algorithms (GA) have presented promising results. However, the determination of a cost function, which is able to generate the best solutions, is not always a trivial task, mainly for complex systems with a great number of measures. Therefore, we introduce, in this paper, a multi-objective optimization approach to better represent the CITO problem. The approach generates a set of good solutions that achieve a balanced compromise between the different measures (objectives). It was implemented by a Pareto Ant Colony (P-ACO) algorithm, which is described in detail. The algorithm was used in a set of real programs and the obtained results are compared to the GA results. The results allow discussing the difference between single and multi-objective approaches especially for complex systems with a greater number of dependencies among the classes. {\textcopyright} 2010 IFIP International Federation for Information Processing.},
	author = {{da Veiga Cabral}, Rafael and Pozo, Aurora and Vergilio, Silvia Regina},
	booktitle = {IFIP International Conference on Testing Software and Systems},
	doi = {10.1007/978-3-642-16573-3_3},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/da Veiga Cabral, Pozo, Vergilio - 2010 - A Pareto Ant Colony Algorithm Applied to the Class Integration and Test Order Problem.pdf:pdf},
	isbn = {3642165729},
	issn = {03029743},
	keywords = {Integration testing,ant colony algorithm,multi-objective,object-oriented software},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {16--29},
	publisher = {Springer},
	series = {ICTSS 2010},
	title = {{A Pareto Ant Colony Algorithm Applied to the Class Integration and Test Order Problem}},
	volume = {6435 LNCS},
	year = {2010}
}

@article{delamaro2001interface,
	title = {Interface mutation: An approach for integration testing},
	author = {Delamaro, Marcio Eduardo and Maidonado, JC and Mathur, Aditya P.},
	journal = {IEEE transactions on software engineering},
	volume = {27},
	number = {3},
	pages = {228--247},
	year = {2001},
	publisher = {IEEE}
}

@inproceedings{Steven2000,
	author = {Steven, John and Chandra, Pravir and Fleck, Bob and Podgurski, Andy},
	title = {jRapture: A Capture/Replay Tool for Observation-based Testing},
	booktitle = {Proceedings of the 2000 ACM SIGSOFT International Symposium on Software Testing and Analysis},
	series = {ISSTA '00},
	year = {2000},
	isbn = {1-58113-266-2},
	pages = {158--167},
	doi = {10.1145/347324.348993},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Java, capture/replay, execution profiling, observation-based testing, software testing}
}

@inproceedings{Kifetew2014,
	author = {Kifetew, Fitsum Meshesha and Jin, Wei and Tiella, Roberto and Orso, Alessandro and Tonella, Paolo},
	title = {Reproducing Field Failures for Programs with Complex Grammar-Based Input},
	booktitle = {Proceedings of the 2014 IEEE International Conference on Software Testing, Verification, and Validation},
	series = {ICST '14},
	year = {2014},
	isbn = {978-1-4799-2255-0},
	pages = {163--172},
	doi = {10.1109/ICST.2014.29},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA},
	keywords = {Field failures, failure reproduction, genetic programming, search-based software engineering}
}

@dataset{zenodoRP,
	author = {Derakhshanfar, Pouria and
		Devroey, Xavier and
		Zaidman, Andy and
		van Deursen, Arie and
		Panichella, Annibale},
	title = {{Replication package of "Good Things Come In 
		Threes: Improving Search-based Crash Reproduction
		With Helper Objectives"}},
	month = aug,
	year = 2020,
	publisher = {Zenodo},
	version = {1.0},
	doi = {10.5281/zenodo.3979097},
	url = {https://doi.org/10.5281/zenodo.3979097}
}

@article{Derakhshanfar2019a,
	archivePrefix = {arXiv},
	arxivId = {cs.SE/1912.04606},
	author = {Derakhshanfar, Pouria and Devroey, Xavier and Perrouin, Gilles and Zaidman, Andy and van Deursen, Arie},
	eprint = {1912.04606},
	journal = {arXiv:1912.04606 [cs.SE]},
	primaryClass = {cs.SE},
	title = {{Search-based Crash Reproduction using Behavioral Model Seeding}},
	year = {2019},
	note = {(submitted to STVR)}
}

@article{deb2002fast,
	title = {A fast and elitist multiobjective genetic algorithm: NSGA-II},
	author = {Deb, Kalyanmoy and Pratap, Amrit and Agarwal, Sameer and Meyarivan, TAMT},
	journal = {IEEE transactions on evolutionary computation},
	volume = {6},
	number = {2},
	pages = {182--197},
	year = {2002},
	publisher = {IEEE}
}

@article{Arcuri2013,
	abstract = {Many software engineering problems have been addressed with search algorithms. Search algorithms usually depend on several parameters (e.g., population size and crossover rate in genetic algorithms), and the choice of these parameters can have an impact on the performance of the algorithm. It has been formally proven in the No Free Lunch theorem that it is impossible to tune a search algorithm such that it will have optimal settings for all possible problems. So, how to properly set the parameters of a search algorithm for a given software engineering problem? In this paper, we carry out the largest empirical analysis so far on parameter tuning in search-based software engineering. More than one million experiments were carried out and statistically analyzed in the context of test data generation for object-oriented software using the EvoSuite tool. Results show that tuning does indeed have impact on the performance of a search algorithm. But, at least in the context of test data generation, it does not seem easy to find good settings that significantly outperform the "default" values suggested in the literature. This has very practical value for both researchers (e.g., when different techniques are compared) and practitioners. Using "default" values is a reasonable and justified choice, whereas parameter tuning is a long and expensive process that might or might not pay off in the end.},
	author = {Arcuri, Andrea and Fraser, Gordon},
	doi = {10.1007/s10664-013-9249-9},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Arcuri, Fraser - 2013 - Parameter tuning or default values An empirical investigation in search-based software engineering.pdf:pdf},
	isbn = {1382-3256},
	issn = {1382-3256},
	journal = {Empirical Software Engineering},
	keywords = {Design of experiments,EvoSuite,Java,Object-oriented,Response surface,Search-based software engineering,Test data generation,Tuning,Unit testing},
	month = {jun},
	number = {3},
	pages = {594--623},
	title = {{Parameter tuning or default values? An empirical investigation in search-based software engineering}},
	volume = {18},
	year = {2013}
}

@article{Alexander2004,
	author = {Alexander, Roger T and Offutt, Jeff},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Alexander, Offutt - 2004 - Coupling-based Testing of O-O Programs.pdf:pdf},
	journal = {Journal of Universal Computer Science},
	keywords = {coverage testing,object-oriented software},
	mendeley-groups = {Software Testing/Integration Testing},
	number = {4},
	pages = {391--427},
	title = {{Coupling-based Testing of O-O Programs}},
	volume = {10},
	year = {2004}
}

@inproceedings{b2016learning,
	title = {A learning-to-rank based fault localization approach using likely invariants},
	author = {B Le, Tien-Duy and Lo, David and Le Goues, Claire and Grunske, Lars},
	booktitle = {Proceedings of the 25th International Symposium on Software Testing and Analysis},
	pages = {177--188},
	year = {2016},
	organization = {ACM}
}

@book{borba2010testing,
	title = {Testing techniques in software engineering: Second pernambuco summer school on software engineering, PSSE 2007, Recife, Brazil, December 3-7, 2007, Revised Lectures},
	author = {Borba, Paulo and Cavalcanti, Ana and Sampaio, Augusto and Woodcook, Jim},
	volume = {6153},
	year = {2010},
	publisher = {Springer}
}

@inproceedings{GordonFlag,
	title = {Combining search-based and constraint-based testing},
	author = {Malburg, Jan and Fraser, Gordon},
	booktitle = {Automated Software Engineering (ASE), 2011 26th IEEE/ACM International Conference on},
	pages = {436--439},
	year = {2011},
	organization = {IEEE},
	publisher = {{IEEE} Computer Society},
	address = {Lawrence, KS, USA}
}

@inproceedings{Waheed,
	author = {Waheed, Shahzada Zeeshan and Qamar, Usman},
	booktitle = {2015 6th IEEE International Conference on Software Engineering and Service Science (ICSESS)},
	doi = {10.1109/ICSESS.2015.7339088},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Waheed, Qamar - 2015 - Data flow based test case generation algorithm for object oriented integration testing.pdf:pdf},
	isbn = {978-1-4799-8352-0},
	keywords = {-path coverage,analysis,du-,object oriented testing,sut,test cases,test criteria},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {sep},
	pages = {423--427},
	publisher = {IEEE},
	title = {{Data flow based test case generation algorithm for object oriented integration testing}},
	year = {2015}
}

@inproceedings{mondal2015,
	author = {Mondal, Debajyoti and Hemmati, Hadi and Durocher, Stephane},
	booktitle = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)},
	doi = {10.1109/ICST.2015.7102588},
	isbn = {978-1-4799-7125-1},
	month = {apr},
	pages = {1--10},
	publisher = {IEEE},
	series = {ICST '15},
	title = {{Exploring test suite diversification and code coverage in multi-objective test case selection}},
	year = {2015}
}

@article{fisher1936use,
	author = {Fisher, Ronald A},
	title = {The use of multiple measurements in taxonomic problems},
	journal = {Annals of Eugenics},
	volume = {7},
	number = {2},
	pages = {179-188},
	doi = {10.1111/j.1469-1809.1936.tb02137.x},
	year = {1936},
	publisher = {Wiley Online Library}
}

@inproceedings{Tonella2012,
	author = {Tonella, Paolo and Marchetto, Alessandro and Nguyen, Cu Duy and Jia, Yue and Lakhotia, Kiran and Harman, Mark},
	doi = {10.1109/ICST.2012.82},
	isbn = {9780769546704},
	issn = {2159-4848},
	booktitle = {Proceedings of the 5th IEEE International Conference on Software Testing, Verification and Validation, ICST 2012},
	pages = {21--30},
	publisher = {IEEE},
	title = {{Finding the optimal balance between over and under approximation of models inferred from execution logs}},
	year = {2012}
}

@inproceedings{McMinn2012,
	author = {McMinn, Phil and Shahbaz, Muzammil and Stevenson, Mark},
	booktitle = {IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST '12)},
	doi = {10.1109/ICST.2012.94},
	isbn = {978-0-7695-4670-4},
	issn = {2159-4848},
	month = {apr},
	pages = {141--150},
	publisher = {IEEE},
	title = {{Search-Based Test Input Generation for String Data Types Using the Results of Web Queries}},
	year = {2012}
}

@inproceedings{BPT17concrash,
	author = {Bianchi, Francesco A. and Pezz{\`{e}}, Mauro and Terragni, Valerio},
	booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2017},
	doi = {10.1145/3106237.3106292},
	isbn = {9781450351058},
	pages = {705--716},
	publisher = {ACM Press},
	title = {{Reproducing concurrency failures from crash stacks}},
	year = {2017}
}

@article{Prowell2004,
	author = {Prowell, S.J and Poore, J.H},
	doi = {10.1016/S0164-1212(03)00241-3},
	isbn = {0164-1212},
	issn = {01641212},
	journal = {Journal of Systems and Software},
	month = {oct},
	number = {2},
	pages = {219--225},
	title = {{Computing system reliability using Markov chain usage models}},
	volume = {73},
	year = {2004}
}

@article{Offutt2008,
	author = {Offutt, Jeff and Abdurazik, Aynur and Schach, Stephen R.},
	doi = {10.1007/s11219-008-9051-x},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Offutt, Abdurazik, Schach - 2008 - Quantitatively measuring object-oriented couplings.pdf:pdf},
	issn = {0963-9314},
	journal = {Software Quality Journal},
	keywords = {abdurazik,analysis and evaluation {\'{a}},analysis {\'{a}} complexity measures,department,execution,george mason university,information and software engineering,j,object-oriented programming {\'{a}} quality,offutt,{\'{a}} a,{\'{a}} maintainability {\'{a}} test},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {dec},
	number = {4},
	pages = {489--512},
	title = {{Quantitatively measuring object-oriented couplings}},
	volume = {16},
	year = {2008}
}

@article{gay2015risks,
	title = {The risks of coverage-directed test case generation},
	author = {Gay, Gregory and Staats, Matt and Whalen, Michael and Heimdahl, Mats PE},
	journal = {IEEE Transactions on Software Engineering},
	volume = {41},
	number = {8},
	pages = {803--819},
	year = {2015},
	publisher = {IEEE}
}

@article{Arcuri2014,
	abstract = {Randomized algorithms are widely used to address many types of software engineering problems, especially in the area of software verification and validation with a strong emphasis on test automation. However, randomized algorithms are affected by chance and so require the use of appropriate statistical tests to be properly analysed in a sound manner. This paper features a systematic review regarding recent publications in 2009 and 2010 showing that, overall, empirical analyses involving randomized algorithms in software engineering tend to not properly account for the random nature of these algorithms. Many of the novel techniques presented clearly appear promising, but the lack of soundness in their empirical evaluations casts unfortunate doubts on their actual usefulness. In software engineering, although there are guidelines on how to carry out empirical analyses involving human subjects, those guidelines are not directly and fully applicable to randomized algorithms. Furthermore, many of the textbooks on statistical analysis are written from the viewpoints of social and natural sciences, which present different challenges from randomized algorithms. To address the questionable overall quality of the empirical analyses reported in the systematic review, this paper provides guidelines on how to carry out and properly analyse randomized algorithms applied to solve software engineering tasks, with a particular focus on software testing, which is by far the most frequent application area of randomized algorithms within software engineering. Copyright {\textcopyright} 2012 John Wiley {\&} Sons, Ltd.},
	author = {Arcuri, Andrea and Briand, Lionel},
	doi = {10.1002/stvr.1486},
	issn = {1099-1689},
	journal = {Software Testing, Verification and Reliability},
	keywords = {Bonferroni adjustment,bonferroni adjustment,confidence interval,effect size,nonparametric test,parametric test,statistical difference,survey,systematic review},
	number = {3},
	pages = {219--250},
	title = {{A hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering}},
	volume = {24},
	year = {2014}
}

@inproceedings{lu2016does,
	title = {How does regression test prioritization perform in real-world software evolution?},
	author = {Lu, Yafeng and Lou, Yiling and Cheng, Shiyang and Zhang, Lingming and Hao, Dan and Zhou, Yangfan and Zhang, Lu},
	booktitle = {2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
	pages = {535--546},
	year = {2016},
	organization = {IEEE}
}

@software{evers_bjorn_2020_3897513,
	author = {Evers, Björn and
		Derakhshanfar, Pouria and
		Devroey, Xavier and
		Zaidman, Andy},
	title = {{Unit test generation for common and uncommon 
		behaviors: replication package}},
	month = jun,
	year = 2020,
	publisher = {Zenodo},
	version = {v1.1.0},
	doi = {10.5281/zenodo.3897513}
}

@inproceedings{MarkFlagRemoval,
	title = {Improving evolutionary testing by flag removal},
	author = {Harman, Mark and Hu, Lin and Hierons, Robert and Baresel, Andr{\'e} and Sthamer, Harmen},
	booktitle = {Proceedings of the 4th Annual Conference on Genetic and Evolutionary Computation},
	pages = {1359--1366},
	year = {2002},
	organization = {Morgan Kaufmann Publishers Inc.},
	publisher = {Morgan Kaufmann},
	address = {New York, USA}
}

@book{Miettinen1999,
	author = {Miettinen, Kaisa},
	title = {Nonlinear Multiobjective Optimization: Kaisa Miettinen},
	year = {1999},
	isbn = {978-1-4615-5563-6},
	edition = {1st},
	publisher = {Springer US}
}

@article{Cartaxo2011,
	author = {Cartaxo, Emanuela G and Machado, Patr{\'{i}}cia D L and Neto, Francisco G Oliveira},
	doi = {10.1002/stvr.413},
	issn = {1099-1689},
	journal = {Software Testing, Verification and Reliability},
	number = {2},
	pages = {75--100},
	publisher = {John Wiley {\&} Sons, Ltd.},
	title = {{On the use of a similarity function for test case selection in the context of model-based testing}},
	volume = {21},
	year = {2011}
}

@inproceedings{BellerICSE2018,
	author = {Moritz Beller and Niels Spruit and Diomidis Spinellis and Andy Zaidman},
	title = {On The Dichotomy of Debugging Behavior Among Programmers},
	booktitle = {Proceedings of the International Conference on Software Engineering (ICSE)},
	pages = {572--583},
	publisher = {ACM},
	year = {2018}
}

@inproceedings{Fraser2012,
	author = {Fraser, Gordon and Arcuri, Andrea},
	booktitle = {2012 IEEE Fifth International Conference on Software Testing, Verification and Validation},
	doi = {10.1109/ICST.2012.92},
	isbn = {978-0-7695-4670-4},
	month = {apr},
	pages = {121--130},
	publisher = {IEEE},
	title = {{The Seed is Strong: Seeding Strategies in Search-Based Software Testing}},
	year = {2012}
}

@article{Panichella2016,
	abstract = {{\textcopyright} 2016 ACM. Automated test generation tools have been widely investigated with the goal of reducing the cost of testing activities. However, generated tests have been shown not to help developers in detecting and finding more bugs even though they reach higher structural coverage compared to manual testing. The main reason is that generated tests are diff-cult to understand and maintain. Our paper proposes an approach, coined TestDescriber, which automatically generates test case summaries of the portion of code exercised by each individual test, thereby improving understandability. We argue that this approach can complement the current techniques around automated unit test generation or searchbased techniques designed to generate a possibly minimal set of test cases. In evaluating our approach we found that (1) developers find twice as many bugs, and (2) test case summaries significantly improve the comprehensibility of test cases, which is considered particularly useful by developers.},
	author = {Panichella, Sebastiano and Panichella, Annibale and Beller, Moritz and Zaidman, Andy and Gall, Harald C.},
	doi = {10.1145/2884781.2884847},
	file = {:Users/pooria/Downloads/07886933.pdf:pdf},
	isbn = {9781450339001},
	issn = {02705257},
	journal = {Proceedings - International Conference on Software Engineering},
	keywords = {Empirical Study,Software testing,Test Case Summarization},
	pages = {547--558},
	publisher = {ACM},
	title = {{The impact of test case summaries on bug fixing performance: An empirical investigation}},
	volume = {14-22-May-2016},
	year = {2016}
}

@article{Abdurazik2009,
	author = {Abdurazik, Aynur and Offutt, Jeff},
	doi = {10.1093/comjnl/bxm054},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Abdurazik, Offutt - 2009 - Using Coupling-Based Weights for the Class Integration and Test Order Problem.pdf:pdf},
	issn = {0010-4620},
	journal = {The Computer Journal},
	keywords = {Class integration and test order,Coupling,OO testing},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {aug},
	number = {5},
	pages = {557--570},
	title = {{Using Coupling-Based Weights for the Class Integration and Test Order Problem}},
	volume = {52},
	year = {2009}
}

@book{Utting2007,
	author = {Utting, Mark and Legeard, Bruno},
	isbn = {0123725011 9780080466484},
	publisher = {Morgan Kaufmann},
	title = {{Practical Model-Based Testing: A Tools Approach}},
	year = {2007}
}

@inproceedings{almasi2017industrial,
	abstract = {—Automated unit test generation has been extensively studied in the literature in recent years. Previous studies on open source systems have shown that test generation tools are quite effective at detecting faults, but how effective and applicable are they in an industrial application? In this paper, we investigate this question using a life insurance and pension products calculator engine owned by SEB Life {\&} Pension Holding AB Riga Branch. To study fault-finding effectiveness, we extracted 25 real faults from the version history of this software project, and applied two up-to-date unit test generation tools for Java, EVOSUITE and RANDOOP, which implement search-based and feedback-directed random test generation, respectively. Automatically generated test suites detected up to 56.40{\%} (EVOSUITE) and 38.00{\%} (RANDOOP) of these faults. The analysis of our results demon-strates challenges that need to be addressed in order to improve fault detection in test generation tools. In particular, classification of the undetected faults shows that 97.62{\%} of them depend on either " specific primitive values " (50.00{\%}) or the construction of " complex state configuration of objects " (47.62{\%}). To study applicability, we surveyed the developers of the application under test on their experience and opinions about the test generation tools and the generated test cases. This leads to insights on requirements for academic prototypes for successful technology transfer from academic research to industrial practice, such as a need to integrate with popular build tools, and to improve the readability of the generated tests.},
	author = {Almasi, M. Moein and Hemmati, Hadi and Fraser, Gordon and Arcuri, Andrea and Benefelds, Janis},
	booktitle = {2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP)},
	doi = {10.1109/ICSE-SEIP.2017.27},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Almasi et al. - 2017 - An industrial evaluation of unit test generation Finding real faults in a financial application.pdf:pdf},
	isbn = {978-1-5386-2717-4},
	keywords = {Automated Tests Generation,Empirical Software Engineering,Random Testing,Search-based Testing},
	month = {may},
	pages = {263--272},
	publisher = {IEEE},
	title = {{An industrial evaluation of unit test generation: Finding real faults in a financial application}},
	year = {2017}
}

@inproceedings{Kifetew2013,
	author = {Kifetew, Fitsum Meshesha and Jin, Wei and Tiella, Roberto and Orso, Alessandro and Tonella, Paolo},
	title = {SBFR: A Search Based Approach for Reproducing Failures of Programs with Grammar Based Input},
	booktitle = {Proceedings of the 28th IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE'13},
	year = {2013},
	isbn = {978-1-4799-0215-6},
	pages = {604--609},
	url = {https://doi.org/10.1109/ASE.2013.6693120},
	doi = {10.1109/ASE.2013.6693120},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA}
}

@inproceedings{tonella04,
	title = {Evolutionary testing of classes},
	author = {Tonella, Paolo},
	booktitle = {ACM SIGSOFT Software Engineering Notes},
	volume = {29},
	number = {4},
	pages = {119--128},
	year = {2004},
	organization = {ACM}
}

@inproceedings{kifetew2013b,
	title = {Orthogonal exploration of the search space in evolutionary test case generation},
	author = {Kifetew, Fitsum M and Panichella, Annibale and De Lucia, Andrea and Oliveto, Rocco and Tonella, Paolo},
	booktitle = {Proc. Int'l Symposium on Software Testing and Analysis (ISSTA)},
	pages = {257--267},
	year = {2013},
	organization = {ACM}
}

@inproceedings{Leemans2018,
	author = {Leemans, Maikel and van der Aalst, Wil M. P. and van den Brand, Mark G. J.},
	booktitle = {2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	doi = {10.1109/SANER.2018.8330248},
	isbn = {978-1-5386-4969-5},
	month = {mar},
	pages = {502--506},
	publisher = {IEEE},
	title = {{The Statechart Workbench: Enabling scalable software event log analysis using process mining}},
	year = {2018}
}

@inproceedings{Yuan2014,
	author = {Yuan, Ding and Luo, Yu and Zhuang, Xin and Rodrigues, Guilherme Renna and Zhao, Xu and Zhang, Yongle and Jain, Pranay U. and Stumm, Michael},
	title = {Simple Testing Can Prevent Most Critical Failures: An Analysis of Production Failures in Distributed Data-intensive Systems},
	booktitle = {Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation},
	series = {OSDI'14},
	year = {2014},
	isbn = {978-1-931971-16-4},
	pages = {249--265},
	publisher = {USENIX Association},
	address = {Berkeley, CA, USA}
}

@article{Herbold2017,
	author = {Herbold, Steffen and Harms, Patrick and Grabowski, Jens},
	doi = {10.1007/s10009-016-0437-y},
	issn = {1433-2779},
	journal = {International Journal on Software Tools for Technology Transfer},
	month = {jun},
	number = {3},
	pages = {309--324},
	publisher = {Springer},
	title = {{Combining usage-based and model-based testing for service-oriented architectures in the industrial practice}},
	volume = {19},
	year = {2017}
}

@inproceedings{Fraser2011whole,
	author = {Fraser, Gordon and Arcuri, Andrea},
	title = {Evolutionary Generation of Whole Test Suites},
	booktitle = {Proc. Int'l Conf. on Quality Software},
	series = {QSIC},
	year = {2011},
	isbn = {978-0-7695-4468-7},
	pages = {31--40},
	numpages = {10},
	-url = {https://doi.org/10.1109/QSIC.2011.19},
	-doi = {10.1109/QSIC.2011.19},
	acmid = {2060610},
	publisher = {IEEE},
	-address = {Washington, DC, USA},
	keywords = {Search based software engineering, branch coverage, genetic algorithm, length}
}

@inproceedings{Soltani2018b,
	address = {Montpellier, France},
	author = {Soltani, Mozhan and Derakhshanfar, Pouria and Panichella, Annibale and Devroey, Xavier and Zaidman, Andy and van Deursen, Arie},
	booktitle = {Symposium on Search-Based Software Engineering. SSBSE 2018.},
	doi = {10.1007/978-3-319-99241-9_18},
	editor = {Colanzi, Thelma Elita and McMinn, Phil},
	isbn = {9783319992402},
	issn = {16113349},
	number = {731529},
	pages = {325--340},
	publisher = {Springer},
	series = {LNCS},
	title = {{Single-objective Versus Multi-objectivized Optimization for Evolutionary Crash Reproduction}},
	volume = {11036},
	year = {2018}
}

@inproceedings{rojas2015combining,
	title = {Combining multiple coverage criteria in search-based unit test generation},
	author = {Rojas, Jos{\'e} Miguel and Campos, Jos{\'e} and Vivanti, Mattia and Fraser, Gordon and Arcuri, Andrea},
	booktitle = {International Symposium on Search Based Software Engineering},
	pages = {93--108},
	year = {2015},
	organization = {Springer}
}

@article{Sampath2007,
	author = {Sampath, Sreedevi and Sprenkle, Sara and Gibson, Emily and Pollock, Lori L and Greenwald, Amie Souter},
	journal = {IEEE Transactions on Software Engineering},
	mendeley-groups = {Software Testing/Web application testing},
	number = {10},
	pages = {643--658},
	title = {{Applying Concept Analysis to User-Session-Based Testing of Web Applications}},
	volume = {33},
	year = {2007}
}

@inproceedings{Chen2018b,
	author = {Chen, Tao and Li, Miqing and Yao, Xin},
	booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference on - GECCO '18},
	doi = {10.1145/3205455.3205513},
	pages = {1419--1426},
	publisher = {ACM Press},
	title = {{On the Effects of Seeding Strategies: A Case for Search-based Multi-Objective Service Composition}},
	year = {2018}
}

@article{Padhye2019,
	abstract = {Programs expecting structured inputs often consist of both a syntactic analysis stage, which parses raw input, and a semantic analysis stage, which conducts checks on the parsed input and executes the core logic of the program. Generator-based testing tools in the lineage of QuickCheck are a promising way to generate random syntactically valid test inputs for these programs. We present Zest, a technique which automatically guides QuickCheck-like randominput generators to better explore the semantic analysis stage of test programs. Zest converts random-input generators into deterministic parametric generators. We present the key insight that mutations in the untyped parameter domain map to structural mutations in the input domain. Zest leverages program feedback in the form of code coverage and input validity to perform feedback-directed parameter search. We evaluate Zest against AFL and QuickCheck on five Java programs: Maven, Ant, BCEL, Closure, and Rhino. Zest covers 1.03x-2.81x as many branches within the benchmarks semantic analysis stages as baseline techniques. Further, we find 10 new bugs in the semantic analysis stages of these benchmarks. Zest is the most effective technique in finding these bugs reliably and quickly, requiring at most 10 minutes on average to find each bug.},
	author = {Padhye, Rohan and Lemieux, Caroline and Sen, Koushik and Papadakis, Mike and {Le Traon}, Yves},
	doi = {10.1145/3293882.3330576},
	file = {:Users/pooria/Downloads/issta19main-p272-p.pdf:pdf},
	isbn = {9781450362245},
	keywords = {Structure-aware fuzzing, property-based testing, random testing,acm reference format,and yves,caroline lemieux,koushik sen,mike papadakis,property-based testing,random testing,rohan padhye,structure-aware fuzzing},
	pages = {329--340},
	title = {{Semantic fuzzing with zest}},
	year = {2019}
}

@inproceedings{McMinn2011,
	author = {McMinn, Phil},
	title = {Search-based software testing: Past, present and future},
	booktitle = {Proceedings of the 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops},
	series = {ICSTW '11},
	year = {2011},
	isbn = {978-0-7695-4345-1},
	pages = {153--163},
	doi = {10.1109/ICSTW.2011.100},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA},
	keywords = {Search-Based Software Testing, Search-Based Software Engineering}
}

@misc{Vieira2016,
	author = {Vieira, Mark},
	title = {{Introducing Compile-Only Dependencies}},
	howpublished = {\url{https://blog.gradle.org/introducing-compile-only-dependencies}},
	year = {2016},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{braione2018sushi,
	title = {SUSHI: a test generator for programs with complex structured inputs},
	author = {Braione, Pietro and Denaro, Giovanni and Mattavelli, Andrea and Pezz{\`e}, Mauro},
	booktitle = {2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)},
	pages = {21--24},
	year = {2018},
	organization = {IEEE}
}

@inproceedings{arcuri2016java,
	title = {Java enterprise edition support in search-based junit test generation},
	author = {Arcuri, Andrea and Fraser, Gordon},
	booktitle = {International Symposium on Search Based Software Engineering},
	pages = {3--17},
	year = {2016},
	organization = {Springer}
}

@article{Kallepalli2001,
	author = {Kallepalli, Chaitanya and Tian, Jeff},
	doi = {10.1109/32.965342},
	journal = {TSE},
	month = {nov},
	number = {11},
	pages = {1023--1036},
	title = {{Measuring and modeling usage and reliability for statistical Web testing}},
	volume = {27},
	year = {2001}
}

@inproceedings{pearson2017evaluating,
	title = {Evaluating and improving fault localization},
	author = {Pearson, Spencer and Campos, Jos{\'e} and Just, Ren{\'e} and Fraser, Gordon and Abreu, Rui and Ernst, Michael D and Pang, Deric and Keller, Benjamin},
	booktitle = {Proceedings of the 39th International Conference on Software Engineering},
	pages = {609--620},
	year = {2017},
	organization = {IEEE Press}
}

@inproceedings{Derakhshanfar2019b,
	address = {Brussels},
	author = {Derakhshanfar, Pouria and Devroey, Xavier and Panichella, Annibale and Zaidman, Andy and Deursen, Arie Van},
	booktitle = {18th Belgium-Netherlands Software Evolution Workshop (BENEVOL '19)},
	title = {{Presentation Abstract : Generating Class Integration Tests Using Call Site Information}},
	url = {http://soft.vub.ac.be/benevol2019/},
	year = {2019}
}

@incollection{Arcuri2011a,
	author = {Arcuri, Andrea and Fraser, Gordon},
	booktitle = {Population English Edition},
	doi = {10.1007/978-3-642-23716-4_6},
	isbn = {9781450305624},
	pages = {33--47},
	title = {{On Parameter Tuning in Search Based Software Engineering}},
	year = {2011}
}

@article{Jaccard1901,
	author = {Jaccard, Paul},
	doi = {10.5169/seals-266450},
	journal = {Bulletin del la Soci{\'{e}}t{\'{e}} Vaudoise des Sciences Naturelles},
	pages = {547--579},
	title = {{{\'{E}}tude comparative de la distribution florale dans une portion des Alpes et des Jura}},
	volume = {37},
	year = {1901}
}

@article{zhang2007moea,
	title = {MOEA/D: A multiobjective evolutionary algorithm based on decomposition},
	author = {Zhang, Qingfu and Li, Hui},
	journal = {IEEE Transactions on evolutionary computation},
	volume = {11},
	number = {6},
	pages = {712--731},
	year = {2007},
	publisher = {IEEE}
}

@inproceedings{feldt2008,
	title = {Searching for cognitively diverse tests: Towards universal test diversity metrics},
	author = {Feldt, Robert and Torkar, Richard and Gorschek, Tony and Afzal, Wasif},
	booktitle = {Proc. Int'l Conf. Software Testing Verification and Validation Workshops (ICSTW)},
	pages = {178--186},
	year = {2008},
	organization = {IEEE}
}

@inproceedings{Derakhshanfar2020a,
	address = {Canc{\'{u}}n, Mexico},
	author = {Derakhshanfar, Pouria and Devroey, Xavier and Zaidman, Andy and van Deursen, Arie and Panichella, Annibale},
	booktitle = {Genetic and Evolutionary Computation Conference Companion (GECCO '20 Companion)},
	doi = {10.1145/3377929.3390077},
	publisher = {ACM},
	title = {{Crash Reproduction Using Helper Objectives}},
	year = {2020}
}

@inproceedings{Leitner2007,
	author = {Leitner, Andreas and Ciupa, Ilinca and Oriol, Manuel and Meyer, Bertrand and Fiva, Arno},
	title = {Contract Driven Development = Test Driven Development - Writing Test Cases},
	booktitle = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	series = {ESEC-FSE '07},
	year = {2007},
	isbn = {978-1-59593-811-4},
	location = {Dubrovnik, Croatia},
	pages = {425--434},
	doi = {10.1145/1287624.1287685},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {unit testing}
}

@article{Arcuri2019,
	abstract = {RESTful APIs are widespread in industry, especially in enterprise applications developed with a microservice architecture. A RESTful web service will provide data via an API over the network using HTTP, possibly interacting with databases and other web services. Testing a RESTful API poses challenges, because inputs/outputs are sequences of HTTP requests/responses to a remote server. Many approaches in the literature do black-box testing, because often the tested API is a remote service whose code is not available. In this article, we consider testing from the point of view of the developers, who have full access to the code that they are writing. Therefore, we propose a fully automated white-box testing approach, where test cases are automatically generated using an evolutionary algorithm. Tests are rewarded based on code coverage and fault-finding metrics. However, REST is not a protocol but rather a set of guidelines on how to design resources accessed over HTTP endpoints. For example, there are guidelines on how related resources should be structured with hierarchical URIs and how the different HTTP verbs should be used to represent well-defined actions on those resources. Test-case generation for RESTful APIs that only rely on white-box information of the source code might not be able to identify how to create prerequisite resources needed before being able to test some of the REST endpoints. Smart sampling techniques that exploit the knowledge of best practices in RESTful API design are needed to generate tests with predefined structures to speed up the search. We implemented our technique in a tool called EvoMaster, which is open source. Experiments on five open-source, yet non-trivial, RESTful services show that our novel technique automatically found 80 real bugs in those applications. However, obtained code coverage is lower than the one achieved by the manually written test suites already existing in those services. Research directions on how to further improve such an approach are therefore discussed, such as the handling of SQL databases.},
	author = {Arcuri, Andrea},
	doi = {10.1145/3293455},
	file = {:Users/pooria/Downloads/a3-arcuri.pdf:pdf},
	issn = {15577392},
	journal = {ACM Transactions on Software Engineering and Methodology},
	keywords = {REST,Software engineering,Testing,Web service},
	number = {1},
	pages = {1--37},
	title = {{RESTful API automated test case generation with Evomaster}},
	volume = {28},
	year = {2019}
}

@article{Panichella2017c,
	author = {Panichella, Annibale and Molina, Urko Rueda},
	doi = {10.1109/SBST.2017.7},
	isbn = {9781538627891},
	journal = {Proceedings - 2017 IEEE/ACM 10th International Workshop on Search-Based Software Testing, SBST 2017},
	pages = {32--38},
	title = {{Java unit testing tool competition - Fifth round}},
	year = {2017}
}

@inproceedings{xiao2011precise,
	title = {Precise identification of problems for structural test generation},
	author = {Xiao, Xusheng and Xie, Tao and Tillmann, Nikolai and De Halleux, Jonathan},
	booktitle = {Software Engineering (ICSE), 2011 33rd International Conference on},
	pages = {611--620},
	year = {2011},
	organization = {IEEE},
	publisher = {{ACM}},
	address = {Waikiki, Honolulu , HI, USA}
}

@misc{JDK7024096,
	author = {JDK},
	title = {{Stack trace has invalid line numbers}},
	howpublished = {\url{https://bugs.openjdk.java.net/browse/JDK-7024096}},
	year = {2016},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{Filieri:2011:REP:1985793.1985840,
	author = {Filieri, Antonio and Ghezzi, Carlo and Tamburrelli, Giordano},
	title = {Run-time Efficient Probabilistic Model Checking},
	booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
	series = {ICSE '11},
	year = {2011},
	isbn = {978-1-4503-0445-0},
	location = {Waikiki, Honolulu, HI, USA},
	pages = {341--350},
	numpages = {10},
	doi = {10.1145/1985793.1985840},
	acmid = {1985840},
	publisher = {ACM}
}

@article{Menzies2013,
	author = {T. {Menzies} and T. {Zimmermann}},
	journal = {IEEE Software},
	title = {Software Analytics: So What?},
	year = {2013},
	volume = {30},
	number = {4},
	pages = {31-37}
}

@inproceedings{Bansal2009,
	author = {Bansal, Priti and Sabharwal, Sangeeta and Sidhu, Pameeta},
	booktitle = {2009 Proceeding of International Conference on Methods and Models in Computer Science (ICM2CS)},
	doi = {10.1109/ICM2CS.2009.5397936},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Bansal, Sabharwal, Sidhu - 2009 - An investigation of strategies for finding test order during Integration testing of object Oriented ap.pdf:pdf},
	isbn = {978-1-4244-5051-0},
	keywords = {coupling,integration testing,object,oriented applications,test order},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {dec},
	pages = {1--8},
	publisher = {IEEE},
	title = {{An investigation of strategies for finding test order during Integration testing of object Oriented applications}},
	year = {2009}
}

@inproceedings{Khan2014,
	address = {Cham},
	author = {Khan, Shaukat Ali and Nadeem, Aamer},
	booktitle = {Proceedings of the Seventh International Conference on Genetic and Evolutionary Computing, ICGEC 2013},
	doi = {10.1007/978-3-319-01796-9_12},
	editor = {Pan, Jeng-Shyang and Kr{\"{o}}mer, Pavel and Sn{\'{a}}{\v{s}}el, V{\'{a}}clav},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Khan, Nadeem - 2014 - Automated Test Data Generation for Coupling Based Integration Testing of Object Oriented Programs Using Particle S.pdf:pdf},
	isbn = {978-3-319-01795-2},
	keywords = {antecedent method,consequent method,coupling,coupling path,coupling type,particle swarm optimization,pso,variable},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {115--124},
	publisher = {Springer International Publishing},
	series = {Advances in Intelligent Systems and Computing},
	title = {{Automated Test Data Generation for Coupling Based Integration Testing of Object Oriented Programs Using Particle Swarm Optimization (PSO)}},
	volume = {238},
	year = {2014}
}

@article{Ceccato2015,
	author = {Ceccato, Mariano and Marchetto, Alessandro and Mariani, Leonardo and Nguyen, Cu D. and Tonella, Paolo},
	title = {Do automatically generated test cases make debugging easier? An experimental assessment of debugging effectiveness and efficiency},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	issue_date = {December 2015},
	volume = {25},
	number = {1},
	month = dec,
	year = {2015},
	issn = {1049-331X},
	pages = {5:1--5:38},
	articleno = {5},
	numpages = {38},
	doi = {10.1145/2768829},
	acmid = {2768829},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Empirical software engineering, automatic test case generation, debugging}
}

@inproceedings{Steindl2012,
	author = {Steindl, Michael and Mottok, Juergen},
	booktitle = {Proceedings of the 10th International Workshop on Intelligent Solutions in Embedded Systems},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Steindl, Mottok - 2012 - Optimizing Software Integration by Considering Integration Test Complexity and Test Effort.pdf:pdf},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {63--68},
	publisher = {IEEE},
	title = {{Optimizing Software Integration by Considering Integration Test Complexity and Test Effort}},
	year = {2012}
}

@inproceedings{Sprenkle2011a,
	author = {Sprenkle, Sara and Pollock, Lori and Simko, Lucy},
	booktitle = {Software Testing, Verification and Validation (ICST), 2011 IEEE Fourth International Conference on},
	doi = {10.1109/ICST.2011.34},
	isbn = {978-1-61284-174-8},
	month = {mar},
	pages = {230--239},
	publisher = {IEEE},
	title = {{A Study of Usage-Based Navigation Models and Generated Abstract Test Cases for Web Applications}},
	year = {2011}
}

@software{derakhshanfar_pouria_2020_3953519,
	author = {Derakhshanfar, Pouria and
		Devroey, Xavier},
	title = {{Replication package of Basic Block Coverage for 
		Search-Based Crash Reproduction}},
	publisher = {Zenodo},
	doi = {10.5281/zenodo.3953519},
	url = {https://doi.org/10.5281/zenodo.3953519}
}

@inproceedings{LiBytecodeTT,
	title = {Bytecode testability transformation},
	author = {Li, Yanchuan and Fraser, Gordon},
	booktitle = {International Symposium on Search Based Software Engineering},
	pages = {237--251},
	year = {2011},
	organization = {Springer},
	publisher = {Springer},
	address = {Szeged, Hungary}
}

@article{Alexander2003,
	author = {Alexander, R.T. and Offutt, A.J.},
	doi = {10.1109/tools.1999.787540},
	file = {:Users/pooria/Downloads/00787540.pdf:pdf},
	pages = {104--114},
	title = {{Analysis techniques for testing polymorphic relationships}},
	year = {2003}
}

@book{Liskov2000,
	author = {Liskov, Barbara and Guttag, John},
	isbn = {076868496X},
	publisher = {Pearson Education},
	title = {{Program development in JAVA: abstraction, specification, and object-oriented design}},
	year = {2000},
	address = {London, England, UK}
}

@inproceedings{noor2015similarity,
	title = {A similarity-based approach for test case prioritization using historical failure data},
	author = {Noor, Tanzeem Bin and Hemmati, Hadi},
	booktitle = {2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)},
	pages = {58--68},
	year = {2015},
	organization = {IEEE}
}

@inproceedings{Wang2018a,
	address = {Gothenburg, Sweden},
	author = {Wang, Xinyu and Sun, Jun and Chen, Zhenbang and Zhang, Peixin and Wang, Jingyi and Lin, Yun},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering - ICSE '18},
	doi = {10.1145/3180155.3180177},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Wang et al. - 2018 - Towards optimal concolic testing.pdf:pdf},
	isbn = {9781450356381},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {291--302},
	publisher = {ACM Press},
	title = {{Towards optimal concolic testing}},
	year = {2018}
}

@article{Alexander2010,
	author = {Alexander, Roger T and Offutt, Jeff and Stefik, Andreas},
	doi = {10.1002/stvr.417},
	issn = {09600833},
	journal = {Software Testing, Verification and Reliability},
	keywords = {coupling,inheritance,integration,polymorphism,testing},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {dec},
	number = {4},
	pages = {291--327},
	title = {{Testing coupling relationships in object-oriented programs}},
	volume = {20},
	year = {2010}
}

@inproceedings{campos2013entropy,
	title = {Entropy-based test generation for improved fault localization},
	author = {Campos, Jos{\'e} and Abreu, Rui and Fraser, Gordon and d'Amorim, Marcelo},
	booktitle = {2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	pages = {257--267},
	year = {2013},
	organization = {IEEE}
}

@book{Zeller2009,
	author = {Zeller, Andreas},
	title = {Why Programs Fail, Second Edition: A Guide to Systematic Debugging},
	year = {2009},
	isbn = {0123745152, 9780123745156},
	edition = {2nd},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA}
}

@article{Shamshiri2016,
	abstract = {{\textcopyright} 2015 IEEE. Rather than tediously writing unit tests manually, tools can be used to generate them automatically - sometimes even resulting in higher code coverage than manual testing. But how good are these tests at actually finding faults? To answer this question, we applied three state-of-the-art unit test generation tools for Java (Randoop, EvoSuite, and Agitar) to the 357 real faults in the Defects4J dataset and investigated how well the generated test suites perform at detecting these faults. Although the automatically generated test suites detected 55.7{\%} of the faults overall, only 19.9{\%} of all the individual test suites detected a fault. By studying the effectiveness and problems of the individual tools and the tests they generate, we derive insights to support the development of automated unit test generators that achieve a higher fault detection rate. These insights include 1) improving the obtained code coverage so that faulty statements are executed in the first instance, 2) improving the propagation of faulty program states to an observable output, coupled with the generation of more sensitive assertions, and 3) improving the simulation of the execution environment to detect faults that are dependent on external factors such as date and time.},
	author = {Shamshiri, Sina and Just, Ren{\'{e}} and Rojas, Jos{\'{e}} Miguel and Fraser, Gordon and McMinn, Phil and Arcuri, Andrea},
	doi = {10.1109/ASE.2015.86},
	isbn = {9781509000241},
	journal = {Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015},
	keywords = {Automated test generation,Empirical study,Regression testing,Test effectiveness,Unit testing},
	pages = {201--211},
	title = {{Do automatically generated unit tests find real faults? An empirical study of effectiveness and challenges}},
	year = {2016}
}

@inproceedings{Lorenzoli2008a,
	author = {Lorenzoli, Davide and Mariani, Leonardo and Pezz{\`{e}}, Mauro},
	booktitle = {Proceedings of the 13th international conference on Software engineering - ICSE '08},
	doi = {10.1145/1368088.1368157},
	isbn = {9781605580791},
	issn = {15387445},
	keywords = {dynamic analysis,gk-tail,model synthesis},
	pages = {501},
	publisher = {ACM Press},
	title = {{Automatic generation of software behavioral models}},
	year = {2008}
}

@article{Harrold1994,
	author = {Harrold, Mary Jean and Rothermel, Gregg},
	title = {Performing Data Flow Testing on Classes},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {Dec. 1994},
	volume = {19},
	number = {5},
	month = dec,
	year = {1994},
	issn = {0163-5948},
	pages = {154--163},
	publisher = {ACM}
}

@inproceedings{prasetya2013t3,
	title = {T3, a combinator-based random testing tool for java: benchmarking},
	author = {Prasetya, IS Wishnu B},
	booktitle = {International Workshop on Future Internet Testing},
	pages = {101--110},
	year = {2013},
	organization = {Springer}
}

@inproceedings{Alexander2002a,
	author = {Alexander, R.T. and Offutt, J. and Biemann, J.M.},
	booktitle = {13th International Symposium on Software Reliability Engineering, 2002. Proceedings.},
	doi = {10.1109/ISSRE.2002.1173253},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Alexander, Offutt, Biemann - 2002 - Fault detection capabilities of coupling-based OO testing.pdf:pdf},
	isbn = {0-7695-1763-3},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {207--218},
	publisher = {IEEE Comput. Soc},
	title = {{Fault detection capabilities of coupling-based OO testing}},
	year = {2002}
}

@misc{log4j,
	author = {Apache},
	title = {{Log4j}},
	howpublished = {\url{https://logging.apache.org/log4j/2.x/}},
	year = {2017},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{Wang2010,
	author = {Wang, Zhengshan and Li, Bixin and Wang, Lulu and Wang, Meng and Gong, Xufang},
	booktitle = {2010 IEEE 34th Annual Computer Software and Applications Conference Workshops},
	doi = {10.1109/COMPSACW.2010.64},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Wang et al. - 2010 - Using Coupling Measure Technique and Random Iterative Algorithm for Inter-Class Integration Test Order Problem.pdf:pdf},
	isbn = {978-1-4244-8089-0},
	keywords = {-object-oriented testing,coupling measure,extended,random,test order,weighted object relation diagram},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {jul},
	pages = {329--334},
	publisher = {IEEE},
	title = {{Using Coupling Measure Technique and Random Iterative Algorithm for Inter-Class Integration Test Order Problem}},
	volume = {1},
	year = {2010}
}

@article{JIiang2019,
	author = {Jiang, S. and Zhang, Miao and Zhang, Yanmei and Wang, Rongcun and Yu, Qiao and Keung, Jacky Wai},
	doi = {10.1109/TSE.2019.2921965},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Jiang et al. - 2019 - An Integration Test Order Strategy to Consider Control Coupling.pdf:pdf},
	issn = {0098-5589},
	journal = {IEEE Transactions on Software Engineering},
	mendeley-groups = {Software Testing/Integration Testing},
	number = {c},
	pages = {1--1},
	title = {{An Integration Test Order Strategy to Consider Control Coupling}},
	volume = {5589},
	year = {2019}
}

@article{Assuncao2014a,
	abstract = {A common problem found during the integration testing is to determine an order to integrate and test the units. Important factors related to stubbing costs and constraints regarding to the software development context must be considered. To solve this problem, the most promising results were obtained with multi-objective algorithms, however few algorithms and contexts have been addressed by existing works. Considering such fact, this paper aims at introducing a generic approach based on multi-objective optimization to be applied in different development contexts and with distinct multi-objective algorithms. The approach is instantiated in the object and aspect-oriented contexts, and evaluated with real systems and three algorithms: NSGA-II, SPEA2 and PAES. The algorithms are compared by using different number of objectives and four quality indicators. Results point out that the characteristics of the systems, the instantiation context and the number of objectives influence on the behavior of the algorithms. Although for more complex systems, PAES reaches better results, NSGA-II is more suitable to solve the referred problem in general cases, considering all systems and indicators. {\textcopyright} 2014 Elsevier Inc. All rights reserved.},
	author = {Assun{\c{c}}{\~{a}}o, Wesley Klewerton Guez and Colanzi, Thelma Elita and Vergilio, Silvia Regina and Pozo, Aurora},
	doi = {10.1016/j.ins.2013.12.040},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Assun{\c{c}}{\~{a}}o et al. - 2014 - A multi-objective optimization approach for the integration and test order problem.pdf:pdf},
	issn = {00200255},
	journal = {Information Sciences},
	keywords = {Integration testing,Multi-objective optimization,Search-based algorithm},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {may},
	pages = {119--139},
	title = {{A multi-objective optimization approach for the integration and test order problem}},
	volume = {267},
	year = {2014}
}

@inproceedings{Fraser2011,
	author = {Fraser, Gordon and Arcuri, Andrea},
	title = {EvoSuite: Automatic test suite generation for object-oriented software},
	booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
	series = {ESEC/FSE '11},
	year = {2011},
	isbn = {978-1-4503-0443-6},
	location = {Szeged, Hungary},
	pages = {416--419},
	numpages = {4},
	doi = {10.1145/2025113.2025179},
	acmid = {2025179},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {assertion generation, search based soft- ware testing, test case generation}
}

@inproceedings{Cao2014,
	author = {Cao, Yu and Zhang, Hongyu and Ding, Sun},
	title = {SymCrash: Selective Recording for Reproducing Crashes},
	booktitle = {Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering},
	series = {ASE '14},
	year = {2014},
	isbn = {978-1-4503-3013-8},
	pages = {791--802},
	doi = {10.1145/2642937.2642993},
	acmid = {2642993},
	publisher = {ACM},
	keywords = {capture and replay, crash reproduction, error handling, program instrumentation, symbolic execution}
}

@inproceedings{gay2017generating,
	title = {Generating effective test suites by combining coverage criteria},
	author = {Gay, Gregory},
	booktitle = {International Symposium on Search Based Software Engineering},
	pages = {65--82},
	year = {2017},
	organization = {Springer}
}

@article{Chen2015,
	author = {Chen, Ning and Kim, Sunghun},
	doi = {10.1109/TSE.2014.2363469},
	issn = {00985589},
	journal = {IEEE Trans. on Software Engineering},
	keywords = {Crash reproduction,optimization,static analysis,symbolic execution,test case generation},
	number = {2},
	pages = {198--220},
	title = {{STAR: Stack trace based automatic crash reproduction via symbolic execution}},
	volume = {41},
	year = {2015}
}

@article{Jan2017,
	author = {Jan, Sadeeq and Panichella, Annibale and Arcuri, Andrea and Briand, Lionel},
	doi = {10.1109/TSE.2017.2778711},
	issn = {00985589},
	journal = {IEEE Transactions on Software Engineering},
	number = {i},
	pages = {1--27},
	title = {{Automatic Generation of Tests to Exploit XML Injection Vulnerabilities in Web Applications}},
	year = {2017}
}

@article{zitzler2001spea2,
	title = {SPEA2: Improving the strength Pareto evolutionary algorithm},
	author = {Zitzler, Eckart and Laumanns, Marco and Thiele, Lothar},
	journal = {TIK-report},
	volume = {103},
	year = {2001},
	publisher = {Eidgen{\"o}ssische Technische Hochschule Z{\"u}rich (ETH), Institut f{\"u}r Technische~…}
}

@inproceedings{Narayanasamy2005,
	author = {Narayanasamy, Satish and Pokam, Gilles and Calder, Brad},
	title = {BugNet: Continuously Recording Program Execution for Deterministic Replay Debugging},
	booktitle = {Proceedings of the 32Nd Annual International Symposium on Computer Architecture},
	series = {ISCA '05},
	year = {2005},
	isbn = {0-7695-2270-X},
	pages = {284--295},
	doi = {10.1109/ISCA.2005.16},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA}
}

@inproceedings{andrews2005mutation,
	title = {Is mutation an appropriate tool for testing experiments?},
	author = {Andrews, James H and Briand, Lionel C and Labiche, Yvan},
	booktitle = {Proceedings of the 27th international conference on Software engineering},
	pages = {402--411},
	year = {2005},
	organization = {ACM}
}

@inproceedings{braione2017tardis,
	author = {Braione, Pietro and Denaro, Giovanni and Mattavelli, Andrea and Pezz\`{e}, Mauro},
	title = {Combining symbolic execution and search-based testing for programs with complex heap inputs},
	booktitle = {Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	series = {ISSTA 2017},
	year = {2017},
	isbn = {978-1-4503-5076-1},
	location = {Santa Barbara, CA, USA},
	pages = {90--101},
	doi = {10.1145/3092703.3092715},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Automatic test case generation, Search-based software engineering, Symbolic execution}
}

@inproceedings{wang2019could,
	title = {Could I have a stack trace to examine the dependency conflict issue?},
	author = {Wang, Ying and Wen, Ming and Wu, Rongxin and Liu, Zhenwei and Tan, Shin Hwei and Zhu, Zhiliang and Yu, Hai and Cheung, Shing-Chi},
	booktitle = {2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
	pages = {572--583},
	year = {2019},
	organization = {IEEE}
}

@inproceedings{Borner2009,
	abstract = {The integration testing process aims at uncovering faults within dependencies between the components of a software system. Due to the lack of resources, it is usually not possible to test all dependencies. Fault prone dependencies have to be selected as test focus. This test focus has to be considered during the stepwise integration of the whole software system. An integration test order strategy has to devise an integration order that integrates dependencies selected as test focus in early integration steps. Furthermore the strategy has to minimize the effort to simulate not yet integrated components of the software system. Current approaches only focus on the reduction of the simulation effort, but do not take into account the test focus. This paper introduces an approach to determine an optimal integration testing order that considers both, the test focus and the simulation effort. The approach is applied to nine real software systems and the results are compared to six approaches. {\textcopyright} 2009 IEEE.},
	author = {Borner, Lars and Paech, Barbara},
	booktitle = {2009 First International Conference on Advances in System Testing and Validation Lifecycle},
	doi = {10.1109/VALID.2009.30},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Borner, Paech - 2009 - Integration Test Order Strategies to Consider Test Focus and Simulation Effort.pdf:pdf},
	isbn = {978-1-4244-4862-3},
	keywords = {Heuristic algorithms,Integration order,Integration testing,Simulation effort,Test focus},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {sep},
	pages = {80--85},
	publisher = {IEEE},
	title = {{Integration Test Order Strategies to Consider Test Focus and Simulation Effort}},
	year = {2009}
}

@article{Harman2012,
	author = {Harman, Mark and Mansouri, S Afshin and Zhang, Yuanyuan},
	doi = {10.1145/2379776.2379787},
	issn = {03600300},
	journal = {ACM Computing Surveys},
	month = {nov},
	number = {1},
	pages = {1--61},
	publisher = {ACM},
	title = {{Search-based software engineering}},
	volume = {45},
	year = {2012}
}

@inproceedings{albunian2017diversity,
	title = {Diversity in search-based unit test suite generation},
	author = {Albunian, Nasser M},
	booktitle = {International Symposium on Search Based Software Engineering},
	pages = {183--189},
	year = {2017},
	organization = {Springer}
}

@article{cadar2013symbolic,
	title = {Symbolic execution for software testing: three decades later.},
	author = {Cadar, Cristian and Sen, Koushik},
	journal = {Commun. ACM},
	volume = {56},
	number = {2},
	pages = {82--90},
	year = {2013}
}

@misc{elasticsearch,
	author = {Elastic},
	title = {{Elasticsearch: RESTful, Distributed Search and Analytics}},
	howpublished = {\url{https://www.elastic.co/products/elasticsearch}},
	year = {2018},
	note = {[Online; accessed 25-January-2018]}
}

@article{conover1980,
	title = {Practical nonparametric statistics},
	author = {Conover, William Jay and Conover, William Jay},
	year = {1980},
	publisher = {Wiley New York}
}

@inproceedings{Lakhotia2010,
	author = {Lakhotia, Kiran and Tillmann, Nikolai and Harman, Mark and de Halleux, Jonathan},
	booktitle = {ICTSS'10},
	doi = {10.1007/978-3-642-16573-3\_11},
	editor = {Petrenko, Alexandre and Sim{\~{a}}o, A and Maldonado, J. C.},
	pages = {142--157},
	publisher = {Springer},
	series = {LNCS},
	title = {{FloPSy - Search-Based Floating Point Constraint Solving for Symbolic Execution}},
	volume = {6435},
	year = {2010}
}

@article{Vergilio2012,
	author = {Vergilio, Silvia Regina and Pozo, Aurora and {\'{A}}rias, Jo{\~{a}}o Carlos Garcia and {da Veiga Cabral}, Rafael and Nobre, Tiago},
	doi = {10.1007/s10009-012-0226-1},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Vergilio et al. - 2012 - Multi-objective optimization algorithms applied to the class integration and test order problem.pdf:pdf},
	issn = {1433-2779},
	journal = {International Journal on Software Tools for Technology Transfer},
	keywords = {integration test,multi-objective optimization,object-oriented software},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {aug},
	number = {4},
	pages = {461--475},
	title = {{Multi-objective optimization algorithms applied to the class integration and test order problem}},
	volume = {14},
	year = {2012}
}

@inproceedings{Winter2019,
	author = {Winter, Jos and Aniche, Maur{\'{i}}cio and Cito, J{\"{u}}rgen and {van Deursen}, Arie},
	booktitle = {ESEC/FSE'19},
	doi = {10.1145/3338906.3338926},
	pages = {420--431},
	publisher = {ACM},
	title = {{Monitoring-aware IDEs}},
	year = {2019}
}

@article{Panichella2018,
	abstract = {{\textcopyright} 1976-2012 IEEE. The test case generation is intrinsically a multi-objective problem, since the goal is covering multiple test targets (e.g., branches). Existing search-based approaches either consider one target at a time or aggregate all targets into a single fitness function (whole-suite approach). Multi and many-objective optimisation algorithms (MOAs) have never been applied to this problem, because existing algorithms do not scale to the number of coverage objectives that are typically found in real-world software. In addition, the final goal for MOAs is to find alternative trade-off solutions in the objective space, while in test generation the interesting solutions are only those test cases covering one or more uncovered targets. In this paper, we present Dynamic Many-Objective Sorting Algorithm (DynaMOSA), a novel many-objective solver specifically designed to address the test case generation problem in the context of coverage testing. DynaMOSA extends our previous many-objective technique Many-Objective Sorting Algorithm (MOSA) with dynamic selection of the coverage targets based on the control dependency hierarchy. Such extension makes the approach more effective and efficient in case of limited search budget. We carried out an empirical study on 346 Java classes using three coverage criteria (i.e., statement, branch, and strong mutation coverage) to assess the performance of DynaMOSA with respect to the whole-suite approach (WS), its archive-based variant (WSA) and MOSA. The results show that DynaMOSA outperforms WSA in 28 percent of the classes for branch coverage (+8 percent more coverage on average) and in 27 percent of the classes for mutation coverage (+11 percent more killed mutants on average). It outperforms WS in 51 percent of the classes for statement coverage, leading to +11 percent more coverage on average. Moreover, DynaMOSA outperforms its predecessor MOSA for all the three coverage criteria in 19 percent of the classes with +8 percent more code coverage on average.},
	author = {Panichella, Annibale and Kifetew, Fitsum Meshesha and Tonella, Paolo},
	doi = {10.1109/TSE.2017.2663435},
	issn = {00985589},
	journal = {IEEE Transactions on Software Engineering},
	keywords = {Evolutionary testing,automatic test case generation,many-objective optimisation},
	number = {2},
	pages = {122--158},
	publisher = {IEEE},
	title = {{Automated test case generation as a many-objective optimisation problem with dynamic selection of the targets}},
	volume = {44},
	year = {2018}
}

@article{tan2012modification,
	title = {A modification to MOEA/D-DE for multiobjective optimization problems with complicated Pareto sets},
	author = {Tan, Yan-Yan and Jiao, Yong-Chang and Li, Hong and Wang, Xin-Kuan},
	journal = {Information Sciences},
	volume = {213},
	pages = {14--38},
	year = {2012},
	publisher = {Elsevier}
}

@inproceedings{Gouraud2001,
	author = {Gouraud, S.-D. and Denise, A and Gaudel, M.-C. and Marre, B},
	booktitle = {ASE '01},
	doi = {10.1109/ASE.2001.989785},
	month = {nov},
	pages = {5--12},
	publisher = {IEEE},
	title = {{A new way of automating statistical testing methods}},
	year = {2001}
}

@inproceedings{Offutt2000b,
	author = {Offutt, A.J. and Abdurazik, Aynur and Alexander, R.T.},
	booktitle = {Proceedings Sixth IEEE International Conference on Engineering of Complex Computer Systems. ICECCS 2000},
	doi = {10.1109/ICECCS.2000.873942},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Offutt, Abdurazik, Alexander - 2000 - An analysis tool for coupling-based integration testing.pdf:pdf},
	isbn = {0-7695-0583-X},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {172--178},
	publisher = {IEEE Comput. Soc},
	title = {{An analysis tool for coupling-based integration testing}},
	year = {2000}
}

@inproceedings{Luckow2014,
	address = {New York, New York, USA},
	author = {Luckow, Kasper and Păsăreanu, Corina S. and Dwyer, Matthew B and Filieri, Antonio and Visser, Willem},
	booktitle = {Proceedings of the 29th ACM/IEEE international conference on Automated software engineering - ASE '14},
	doi = {10.1145/2642937.2643011},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Luckow et al. - 2014 - Exact and approximate probabilistic symbolic execution for nondeterministic programs.pdf:pdf},
	isbn = {9781450330138},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {575--586},
	publisher = {ACM Press},
	title = {{Exact and approximate probabilistic symbolic execution for nondeterministic programs}},
	year = {2014}
}

@inproceedings{godefroid2008,
	title = {Grammar-based whitebox fuzzing},
	author = {Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y},
	booktitle = {ACM Sigplan Notices},
	volume = {43},
	number = {6},
	pages = {206--215},
	year = {2008},
	organization = {ACM}
}

@inproceedings{Coles2016a,
	author = {Coles, Henry and Laurent, Thomas and Henard, Christopher and Papadakis, Mike and Ventresque, Anthony},
	booktitle = {ISSTA 2016},
	doi = {10.1145/2931037.2948707},
	pages = {449--452},
	publisher = {ACM},
	title = {{PIT: a practical mutation testing tool for Java}},
	year = {2016}
}

@inproceedings{jin2012bugredux,
	author = {Jin, Wei and Orso, Alessandro},
	booktitle = {2012 34th International Conference on Software Engineering (ICSE)},
	doi = {10.1109/ICSE.2012.6227168},
	isbn = {978-1-4673-1066-6},
	issn = {02705257},
	month = {jun},
	pages = {474--484},
	publisher = {IEEE},
	title = {{BugRedux: reproducing field failures for in-house debugging}},
	year = {2012}
}

@inproceedings{Soltani2016,
	author = {Soltani, Mozhan and Panichella, Annibale and van Deursen, Arie},
	booktitle = {Proceedings of the 9th International Workshop on Search-Based Software Testing - SBST '16},
	doi = {10.1145/2897010.2897015},
	isbn = {9781450341660},
	pages = {1--4},
	title = {{Evolutionary testing for crash reproduction}},
	year = {2016}
}

@inproceedings{blasi2018,
	title = {Translating code comments to procedure specifications},
	author = {Blasi, Arianna and Goffi, Alberto and Kuznetsov, Konstantin and Gorla, Alessandra and Ernst, Michael D and Pezz{\`e}, Mauro and Castellanos, Sergio Delgado},
	booktitle = {Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages = {242--253},
	year = {2018},
	organization = {ACM}
}

@article{harman12trends,
	title = {Search-based software engineering: Trends, techniques and applications},
	author = {Harman, Mark and Mansouri, S Afshin and Zhang, Yuanyuan},
	journal = {ACM Computing Surveys (CSUR)},
	volume = {45},
	number = {1},
	pages = {11},
	year = {2012},
	publisher = {ACM}
}

@article{Rojas2016,
	author = {Rojas, Jos{\'e} Miguel and Fraser, Gordon and Arcuri, Andrea},
	title = {Seeding strategies in search-based unit test generation},
	journal = {Softw. Test. Verif. Reliab.},
	-issue_date = {August 2016},
	volume = {26},
	number = {5},
	-month = aug,
	year = {2016},
	issn = {0960-0833},
	pages = {366--401},
	numpages = {36},
	doi = {10.1002/stvr.1601},
	acmid = {3034574},
	publisher = {John Wiley and Sons Ltd.},
	address = {Chichester, UK},
	keywords = {JUnit, Java, search-based software engineering, search-based testing, test case generation, testing classes}
}

@inproceedings{Corne2001,
	author = {Corne, David W. and Jerram, Nick R. and Knowles, Joshua D. and Oates, Martin J.},
	title = {PESA-II: Region-Based Selection in Evolutionary Multiobjective Optimization},
	year = {2001},
	isbn = {1558607749},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
	booktitle = {Proceedings of the 3rd Annual Conference on Genetic and Evolutionary Computation},
	pages = {283--290},
	numpages = {8},
	location = {San Francisco, California},
	series = {GECCO 01}
}

@article{Whittaker1994,
	author = {Whittaker, James A. and Thomason, Michael G.},
	doi = {10.1109/32.328991},
	issn = {00985589},
	journal = {IEEE Transactions on Software Engineering},
	month = {oct},
	number = {10},
	pages = {812--824},
	title = {{A Markov chain model for statistical software testing}},
	volume = {20},
	year = {1994}
}

@inproceedings{soltani2017,
	author = {Soltani, Mozhan and Panichella, Annibale and van Deursen, Arie},
	booktitle = {2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)},
	doi = {10.1109/ICSE.2017.27},
	isbn = {978-1-5386-3868-2},
	month = {may},
	pages = {209--220},
	publisher = {IEEE},
	title = {{A guided genetic algorithm for automated crash reproduction}},
	year = {2017},
	address = {Buenos Aires, Argentina}
}

@article{Sprenkle2013,
	author = {Sprenkle, Sara E and Pollock, Lori L and Simko, Lucy M},
	doi = {10.1002/stvr.1496},
	issn = {1099-1689},
	journal = {Software Testing, Verification and Reliability},
	number = {6},
	pages = {439--464},
	title = {{Configuring effective navigation models and abstract test cases for web applications by analysing user behaviour}},
	volume = {23},
	year = {2013}
}

@article{vargha,
	title = {A critique and improvement of the {CL} common language effect size statistics of {McGraw} and {Wong}},
	author = {Vargha, Andr{\'a}s and Delaney, Harold D},
	journal = {Journal of Educational and Behavioral Statistics},
	volume = {25},
	number = {2},
	pages = {101--132},
	year = {2000},
	publisher = {Sage Publications Sage CA: Los Angeles, CA}
}

@inproceedings{Alshahwan2011,
	author = {Alshahwan, Nadia and Harman, Mark},
	booktitle = {2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},
	doi = {10.1109/ASE.2011.6100082},
	isbn = {978-1-4577-1639-3},
	issn = {1938-4300},
	month = {nov},
	pages = {3--12},
	publisher = {IEEE},
	title = {{Automated web application testing using search based software engineering}},
	year = {2011}
}

@inproceedings{Fraser2011a,
	author = {Fraser, Gordon and Zeller, Andreas},
	booktitle = {2011 Fourth IEEE International Conference on Software Testing, Verification and Validation},
	doi = {10.1109/ICST.2011.53},
	isbn = {978-1-61284-174-8},
	issn = {2159-4848},
	month = {mar},
	pages = {80--89},
	publisher = {IEEE},
	title = {{Exploiting Common Object Usage in Test Case Generation}},
	year = {2011}
}

@inproceedings{Jahne2009,
	author = {J\"{a}hne, Martin and Li, Xiaodong and Branke, J\"{u}rgen},
	title = {Evolutionary algorithms and multi-objectivization for the travelling salesman problem},
	year = {2009},
	isbn = {9781605583259},
	publisher = {Association for Computing Machinery},
	url = {https://doi.org/10.1145/1569901.1569984},
	booktitle = {Proceedings of the 11th Annual Conference on Genetic and Evolutionary Computation},
	pages = {595–-602},
	numpages = {8},
	keywords = {travelling salesman problem, multi-objectivization, multi-objective optimization, genetic algorithms},
	location = {Montreal, Qu\'{e}bec, Canada},
	series = {GECCO 09}
}

@inproceedings{kifetew2019java,
	title = {Java unit testing tool competition: seventh round},
	author = {Kifetew, Fitsum and Devroey, Xavier and Rueda, Urko},
	booktitle = {Proceedings of the 12th International Workshop on Search-Based Software Testing},
	pages = {15--20},
	year = {2019},
	organization = {IEEE Press}
}

@inproceedings{AliKhan2013,
	author = {{Ali Khan}, Shaukat and Nadeem, Aamer},
	booktitle = {2013 10th International Conference on Information Technology: New Generations},
	doi = {10.1109/ITNG.2013.59},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Ali Khan, Nadeem - 2013 - Automated Test Data Generation for Coupling Based Integration Testing of Object Oriented Programs Using Evolut.pdf:pdf},
	isbn = {978-0-7695-4967-5},
	keywords = {- coupling path,antecendent,consequent method,coupling type,coupling variable,method},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {apr},
	pages = {369--374},
	publisher = {IEEE},
	title = {{Automated Test Data Generation for Coupling Based Integration Testing of Object Oriented Programs Using Evolutionary Approaches}},
	year = {2013}
}

@inproceedings{Lopez-Herrejon2014a,
	author = {Lopez-Herrejon, Roberto E and Ferrer, Javier and Chicano, Francisco and Egyed, Alexander and Alba, Enrique},
	booktitle = {2014 IEEE Congress on Evolutionary Computation (CEC)},
	doi = {10.1109/CEC.2014.6900473},
	isbn = {978-1-4799-1488-3},
	month = {jul},
	pages = {387--396},
	publisher = {IEEE},
	title = {{Comparative analysis of classical multi-objective evolutionary algorithms and seeding strategies for pairwise testing of Software Product Lines}},
	year = {2014}
}

@article{Roche2013,
	author = {Roche, James},
	doi = {10.1145/2524713.2524721},
	issn = {00010782},
	journal = {Communications of the ACM},
	number = {11},
	pages = {38--43},
	title = {{Adopting DevOps practices in quality assurance}},
	volume = {56},
	year = {2013}
}

@inproceedings{fraser2014automated,
	title = {Automated test generation for java generics},
	author = {Fraser, Gordon and Arcuri, Andrea},
	booktitle = {International Conference on Software Quality},
	pages = {185--198},
	year = {2014},
	organization = {Springer},
	publisher = {Springer},
	address = {Vienna, Austria}
}

@misc{scott1997building,
	title = {Building Object Applications That Work, Your Step-By-Step Handbook for Developing Robust Systems Using Object Technology},
	author = {Scott, Ambler},
	year = {1997},
	publisher = {Cambridge University Press/SIGS Books}
}

@misc{jdp,
	author = {{Java Design Patterns}},
	title = {{Design patterns implemented in Java}},
	howpublished = {\url{http://java-design-patterns.com}},
	year = {2018},
	note = {[Online; accessed 25-January-2018]}
}

@misc{jdk8release,
	author = {Oracle},
	title = {{What's New in JDK 8}},
	year = {2019},
	howpublished = {\url{https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html}},
	note = {Accessed: 2019-05-14}
}

@article{Coelho2017,
	author = {Coelho, Roberta and Almeida, Lucas and Gousios, Georgios and van Deursen, Arie and Treude, Christoph},
	doi = {10.1007/s10664-016-9443-7},
	isbn = {1573-7616},
	issn = {1382-3256},
	journal = {Empirical Software Engineering},
	month = {jun},
	number = {3},
	pages = {1264--1304},
	publisher = {Empirical Software Engineering},
	title = {{Exception handling bug hazards in Android}},
	volume = {22},
	year = {2017}
}

@inproceedings{durillo2010jmetal,
	title = {The jMetal framework for multi-objective optimization: Design and architecture},
	author = {Durillo, Juan J and Nebro, Antonio J and Alba, Enrique},
	booktitle = {IEEE congress on evolutionary computation},
	pages = {1--8},
	year = {2010},
	organization = {IEEE}
}

@inproceedings{Panichella2015,
	author = {Panichella, Annibale and Kifetew, Fitsum Meshesha and Tonella, Paolo},
	booktitle = {ICST'15},
	doi = {10.1109/ICST.2015.7102604},
	month = {apr},
	pages = {1--10},
	publisher = {IEEE},
	title = {{Reformulating Branch Coverage as a Many-Objective Optimization Problem}},
	year = {2015}
}

@article{Briand2003a,
	abstract = {The issue of ordering class integration in the context of integration testing has been discussed by a number of researchers. More specifically, strategies have been proposed to generate a test order while minimizing stubbing. Recent papers have addressed the problem of deriving an integration order in the presence of dependency cycles in the class diagram. Such dependencies represent a practical problem as they make any topological ordering of classes impossible. Three main approaches, aimed at "breaking" cycles, have been proposed. The first one was proposed by Tai and Daniels (1999) and is based on assigning a higher-level order according to aggregation and inheritance relationships and a lower-level order according to associations. The second one was proposed by Le Traon et al. (2000) and is based on identifying strongly connected components in the dependency graph. The third one was proposed by Briand et al. (2000); it combines some of the principles of the two previous approaches and addresses some of their shortcomings (e.g., the first approach may result into unnecessary stubbing whereas the second may lead to breaking cycles by "removing" aggregation or inheritance dependencies, thus leading to complex stubbing). This paper reviews these strategies (principles are described, advantages and drawbacks are precisely investigated) and provides both analytical and empirical comparisons based on five case studies.},
	author = {Briand, L.C. and Labiche, Yvan and {Yihong Wang}},
	doi = {10.1109/TSE.2003.1214324},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Briand, Labiche, Yihong Wang - 2003 - An investigation of graph-based class integration test order strategies.pdf:pdf},
	issn = {0098-5589},
	journal = {IEEE Transactions on Software Engineering},
	keywords = {Experimentation,Integration order,Integration testing,Object-oriented software engineering},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {jul},
	number = {7},
	pages = {594--607},
	publisher = {IEEE},
	title = {{An investigation of graph-based class integration test order strategies}},
	volume = {29},
	year = {2003}
}

@article{holm79,
	added-at = {2009-01-22T02:55:58.000+0100},
	author = {Holm, S.},
	journal = {Scandinavian Journal of Statistics},
	pages = {65-70},
	title = {A simple sequentially rejective multiple test procedure},
	volume = 6,
	year = 1979
}

@inproceedings{nayrolles2015jcharming,
	author = {Nayrolles, Mathieu and Hamou-Lhadj, Abdelwahab and Tahar, Sofiene and Larsson, Alf},
	booktitle = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	doi = {10.1109/SANER.2015.7081820},
	isbn = {978-1-4799-8469-5},
	issn = {20477481},
	month = {mar},
	pages = {101--110},
	publisher = {IEEE},
	title = {{JCHARMING: A bug reproduction approach using crash traces and directed model checking}},
	year = {2015}
}

@inproceedings{Panichella2019,
	address = {Montreal, Quebec, Canada},
	author = {Panichella, Annibale},
	booktitle = {Proceedings of the 12th International Workshop on Search-Based Software Testing},
	doi = {10.1109/SBST.2019.00010},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Panichella - 2019 - Beyond Unit-Testing in Search-based Test Case Generation Challenges and Opportunities.pdf:pdf},
	isbn = {9781728122335},
	mendeley-groups = {Software Testing/Integration Testing},
	number = {May},
	pages = {7--8},
	publisher = {IEEE Press},
	series = {SBST '19},
	title = {{Beyond Unit-Testing in Search-based Test Case Generation : Challenges and Opportunities}},
	year = {2019}
}

@article{Hamming1950,
	author = {Hamming, R. W.},
	issn = {00058580},
	journal = {Bell System Technical Journal},
	month = {apr},
	number = {2},
	pages = {147--160},
	title = {{Error Detecting and Error Correcting Codes}},
	volume = {29},
	year = {1950}
}

@inproceedings{Cadar2008,
	author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
	title = {KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs},
	booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
	series = {OSDI'08},
	year = {2008},
	pages = {209--224},
	numpages = {16},
	publisher = {USENIX Association},
	address = {Berkeley, CA, USA}
}

@inproceedings{Tonella2014,
	author = {Tonella, Paolo and Tiella, Roberto and Nguyen, Cu Duy},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering - ICSE 2014},
	doi = {10.1145/2568225.2568242},
	isbn = {9781450327565},
	issn = {02705257},
	pages = {562--572},
	publisher = {ACM Press},
	title = {{Interpolated n-grams for model based testing}},
	year = {2014}
}

@InProceedings{Wang2019,
	author = {Qianqian Wang and Alessandro Orso},
	booktitle = {ICSE '19},
	title = {Mimicking User Behavior to Improve In-House Test Suites},
	doi = {10.1109/icse-companion.2019.00133},
	publisher = {{IEEE}},
	month = {may},
	year = {2019}
}

@article{Derakhshanfar2020,
	author = {Derakhshanfar, Pouria and Devroey, Xavier and Perrouin, Gilles and Zaidman, Andy and Deursen, Arie},
	doi = {10.1002/stvr.1733},
	journal = {STVR},
	month = {may},
	number = {3},
	pages = {e1733},
	publisher = {Wiley},
	title = {{Search-based crash reproduction using behavioural model seeding}},
	volume = {30},
	year = {2020}
}

@article{Panichella2018a,
	abstract = {Context: Replication studies and experiments form an important foundation in advancing scientific research. While their prevalence in Software Engineering is increasing, there is still more to be done. Objective: This article aims to extend our previous replication study on search-based test generation techniques by performing a large-scale empirical comparison with further techniques from the state of the art. Method: We designed a comprehensive experimental study involving six techniques, a benchmark composed of 180 non-trivial Java classes, and a total of 21,600 independent executions. Metrics regarding effectiveness and efficiency of the techniques were collected and analyzed by means of statistical methods. Results: Our empirical study shows that single target approaches are generally outperformed by multi-target approaches, while within the multi-target approaches, DynaMOSA/MOSA, which are based on many-objective optimization, outperform the others, in particular for complex classes. Conclusion: The results obtained from our large-scale empirical investigation confirm what has been reported in previous studies, while also highlighting striking differences and novel observations. Future studies, on different benchmarks and considering additional techniques, could further reinforce and extend our findings.},
	author = {Panichella, Annibale and Kifetew, Fitsum Meshesha and Tonella, Paolo},
	doi = {10.1016/j.infsof.2018.08.009},
	isbn = {9780323071673},
	issn = {09505849},
	journal = {Information and Software Technology},
	keywords = {Large-scale evaluation,Search-based testing,Test case generation},
	number = {June},
	pages = {236--256},
	publisher = {Elsevier},
	title = {{A large scale empirical comparison of state-of-the-art search-based test case generators}},
	volume = {104},
	year = {2018}
}

@article{Hevner2004,
	author = {Hevner and March and Park and Ram},
	doi = {10.2307/25148625},
	issn = {02767783},
	journal = {MIS Quarterly},
	number = {1},
	pages = {75},
	title = {{Design Science in Information Systems Research}},
	volume = {28},
	year = {2004}
}

@Article{Allen:1970:CFA:800028.808479,
	author = {Frances E. Allen},
	title = {Control flow analysis},
	journal = {{ACM} {SIGPLAN} Notices},
	year = {1970},
	volume = {5},
	number = {7},
	month = {jul},
	pages = {1--19},
	doi = {10.1145/390013.808479},
	publisher = {ACM}
}

@inproceedings{Gomez2016,
	author = {G\'{o}mez, Mar\'{\i}a and Rouvoy, Romain and Adams, Bram and Seinturier, Lionel},
	title = {Reproducing Context-sensitive Crashes of Mobile Apps Using Crowdsourced Monitoring},
	booktitle = {Proceedings of the International Conference on Mobile Software Engineering and Systems},
	series = {MOBILESoft '16},
	year = {2016},
	isbn = {978-1-4503-4178-3},
	pages = {88--99},
	doi = {10.1145/2897073.2897088},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Android apps, context-sensitive crashes, crowdsourcing, mobile app crash reproduction}
}

@inproceedings{Maiga2015,
	author = {Maiga, Abdou and Hamou-Lhadj, Abdelwahab and Nayrolles, Mathieu and {Koochekian Sabor}, Korosh and Larsson, Alf},
	booktitle = {2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	doi = {10.1109/ICSM.2015.7332485},
	isbn = {978-1-4673-7532-0},
	month = {sep},
	pages = {342--351},
	publisher = {IEEE},
	title = {{An empirical study on the handling of crash reports in a large software company: An experience report}},
	year = {2015},
	address = {Bremen, Germany}
}

@report{D57,
	author = {Audren, Mael and Boussaa, Mohamed and Thomas Boye, Lars and Gibello, Pierre-Yves and Gorro{\~{n}}ogoitia, Jes{\'{u}}s and Massol, Vincent and Mendez, Fernando and Montasser, Assad and Velho, Pedro},
	title = {{STAMP WP5 - D5.7 - Use Cases Validation Report V3}},
	institution = {STAMP},
	year = {2019},
	howpublished = {https://www.stamp-project.eu/view/main/deliverables}
}

@inproceedings{Grano2018,
	author = {Grano, Giovanni and Ciurumelea, Adelina and Panichella, Sebastiano and Palomba, Fabio and Gall, Harald C.},
	booktitle = {SANER '18},
	doi = {10.1109/SANER.2018.8330198},
	month = {mar},
	pages = {72--83},
	publisher = {IEEE},
	title = {{Exploring the integration of user feedback in automated testing of Android applications}},
	year = {2018}
}

@Article{garcia2008study,
	author = "Garc{\'i}a, Salvador
		and Molina, Daniel
		and Lozano, Manuel
		and Herrera, Francisco",
	title = "A study on the use of non-parametric tests for analyzing the evolutionary algorithms' behaviour: a case study on the CEC'2005 special session on real parameter optimization",
	journal = "Journal of Heuristics",
	year = "2008",
	month = "May",
	day = "14",
	volume = "15",
	number = "6",
	pages = "617",
	issn = "1572-9397",
	doi = "10.1007/s10732-008-9080-4"
}

@inproceedings{Dulz2003,
	author = {Dulz, W. and {Fenhua Zhen}},
	booktitle = {Third International Conference on Quality Software, 2003. Proceedings.},
	doi = {10.1109/QSIC.2003.1319119},
	isbn = {0-7695-2015-4},
	pages = {336--342},
	publisher = {IEEE},
	title = {{MaTeLo - statistical usage testing by annotated sequence diagrams, Markov chains and TTCN-3}},
	year = {2003}
}

@inproceedings{Zamfir2010,
	author = {Zamfir, Cristian and Candea, George},
	title = {Execution Synthesis: A Technique for Automated Software Debugging},
	booktitle = {Proceedings of the 5th European Conference on Computer Systems},
	series = {EuroSys '10},
	year = {2010},
	isbn = {978-1-60558-577-2},
	pages = {321--334},
	doi = {10.1145/1755913.1755946},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated debugging, symbolic execution}
}

@inproceedings{coppit2005,
	title = {Yagg: an easy-to-use generator for structured test inputs},
	author = {Coppit, David and Lian, Jiexin},
	booktitle = {Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering},
	pages = {356--359},
	year = {2005},
	organization = {ACM}
}

@inproceedings{Galeotti2013,
	author = {Galeotti, Juan Pablo and Fraser, Gordon and Arcuri, Andrea},
	booktitle = {ISSRE'13},
	doi = {10.1109/ISSRE.2013.6698889},
	month = {nov},
	pages = {360--369},
	publisher = {IEEE},
	title = {{Improving search-based test suite generation with dynamic symbolic execution}},
	year = {2013}
}

@inproceedings{beyene2012,
	title = {Generating string test data for code coverage},
	author = {Beyene, Michael and Andrews, James H},
	booktitle = {2012 IEEE Fifth International Conference on Software Testing, Verification and Validation},
	pages = {270--279},
	year = {2012},
	organization = {IEEE}
}

@article{Campos2018,
	abstract = {Context: Evolutionary algorithms have been shown to be effective at generating unit test suites optimised for code coverage. While many specific aspects of these algorithms have been evaluated in detail (e.g., test length and different kinds of techniques aimed at improving performance, like seeding), the influence of the choice of evolutionary algorithm has to date seen less attention in the literature. Objective: Since it is theoretically impossible to design an algorithm that is the best on all possible problems, a common approach in software engineering problems is to first try the most common algorithm, a genetic algorithm, and only afterwards try to refine it or compare it with other algorithms to see if any of them is more suited for the addressed problem. The objective of this paper is to perform this analysis, in order to shed light on the influence of the search algorithm applied for unit test generation. Method: We empirically evaluate thirteen different evolutionary algorithms and two random approaches on a selection of non-trivial open source classes. All algorithms are implemented in the EVOSUITE test generation tool, which includes recent optimisations such as the use of an archive during the search and optimisation for multiple coverage criteria. Results: Our study shows that the use of a test archive makes evolutionary algorithms clearly better than random testing, and it confirms that the DynaMOSA many-objective search algorithm is the most effective algorithm for unit test generation. Conclusion: Our results show that the choice of algorithm can have a substantial influence on the performance of whole test suite optimisation. Although we can make a recommendation on which algorithm to use in practice, no algorithm is clearly superior in all cases, suggesting future work on improved search algorithms for unit test generation.},
	author = {Campos, Jos{\'{e}} and Ge, Yan and Albunian, Nasser and Fraser, Gordon and Eler, Marcelo and Arcuri, Andrea},
	doi = {10.1016/j.infsof.2018.08.010},
	issn = {09505849},
	journal = {Information and Software Technology},
	keywords = {Empirical study,Evolutionary algorithms,Test suite generation},
	number = {August},
	pages = {207--235},
	publisher = {Elsevier},
	title = {{An empirical evaluation of evolutionary algorithms for unit test suite generation}},
	volume = {104},
	year = {2018}
}

@article{Hemmati2013,
	author = {Hemmati, Hadi and Arcuri, Andrea and Briand, Lionel},
	doi = {10.1145/2430536.2430540},
	issn = {1049331X},
	journal = {ACM Transactions on Software Engineering and Methodology},
	month = {feb},
	number = {1},
	pages = {1--42},
	publisher = {ACM Press},
	title = {{Achieving scalable model-based testing through test case diversity}},
	volume = {22},
	year = {2013}
}

@inproceedings{Verwer2017,
	author = {Verwer, Sicco and Hammerschmidt, Christian A},
	booktitle = {2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	doi = {10.1109/ICSME.2017.58},
	editor = {O'Conner, L},
	month = {sep},
	pages = {638--642},
	publisher = {IEEE},
	title = {{flexfringe: A Passive Automaton Learning Package}},
	year = {2017}
}

@inproceedings{just2014defects4j,
	author = {Just, Ren{\'{e}} and Jalali, Darioush and Ernst, Michael D.},
	booktitle = {Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014},
	doi = {10.1145/2610384.2628055},
	isbn = {9781450326452},
	pages = {437--440},
	publisher = {ACM Press},
	title = {{Defects4J: A database of existing faults to enable controlled testing studies for Java programs}},
	year = {2014},
	address = {San Jose, CA, USA}
}

@article{MarkFlag,
	title = {Testability transformation},
	author = {Harman, Mark and Hu, Lin and Hierons, Rob and Wegener, Joachim and Sthamer, Harmen and Baresel, Andr{\'e} and Roper, Marc},
	journal = {IEEE Transactions on Software Engineering},
	volume = {30},
	number = {1},
	pages = {3--16},
	year = {2004},
	publisher = {IEEE}
}

@book{pesarin2010permutation,
	title = {Permutation tests for complex data: theory, applications and software},
	author = {Pesarin, Fortunato and Salmaso, Luigi},
	year = {2010},
	publisher = {John Wiley \& Sons}
}

@article{fraser20151600,
	title = {1600 faults in 100 projects: Automatically finding faults while achieving high coverage with evosuite},
	author = {Fraser, Gordon and Arcuri, Andrea},
	journal = {Empirical Software Engineering},
	volume = {20},
	number = {3},
	pages = {611--639},
	year = {2015},
	publisher = {Springer}
}

@inproceedings{Coelho2015,
	author = {Coelho, Roberta and Almeida, Lucas and Gousios, Georgios and van Deursen, Arie},
	title = {Unveiling Exception Handling Bug Hazards in Android Based on GitHub and Google Code Issues},
	booktitle = {Proceedings of the 12th Working Conference on Mining Software Repositories},
	series = {MSR '15},
	year = {2015},
	isbn = {978-0-7695-5594-2},
	pages = {134--145},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA}
}

@inproceedings{smith2015cure,
	title = {Is the cure worse than the disease? overfitting in automated program repair},
	author = {Smith, Edward K and Barr, Earl T and Le Goues, Claire and Brun, Yuriy},
	booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	pages = {532--543},
	year = {2015},
	organization = {ACM}
}

@article{whigham2009implicitly,
	title = {Implicitly controlling bloat in genetic programming},
	author = {Whigham, Peter A and Dick, Grant},
	journal = {IEEE Transactions on Evolutionary Computation},
	volume = {14},
	number = {2},
	pages = {173--190},
	year = {2009},
	publisher = {IEEE}
}

@article{schwartz2018,
	title = {Investigating faults missed by test suites achieving high code coverage},
	author = {Schwartz, Amanda and Puckett, Daniel and Meng, Ying and Gay, Gregory},
	journal = {Journal of Systems and Software},
	volume = {144},
	pages = {106--120},
	year = {2018},
	publisher = {Elsevier}
}

@inproceedings{Zhang2015a,
	author = {Zhang, Yuanyuan and Harman, Mark and Jia, Yue and Sarro, Federica},
	booktitle = {Search-Based Software Engineering, SSBSE '15},
	editor = {Barros, M{\'{a}}rcio and Labiche, Yvan},
	isbn = {978-3-319-22183-0},
	pages = {301--307},
	publisher = {Springer International Publishing},
	title = {{Inferring Test Models from Kate's Bug Reports Using Multi-objective Search}},
	year = {2015}
}

@article{Indraneel,
	author = {Das, Indraneel and Dennis, J. E.},
	title = {Normal-Boundary Intersection: A New Method for Generating the Pareto Surface in Nonlinear Multicriteria Optimization Problems},
	year = {1998},
	publisher = {Society for Industrial and Applied Mathematics},
	address = {USA},
	volume = {8},
	number = {3},
	issn = {1052-6234},
	url = {https://doi.org/10.1137/S1052623496307510},
	journal = {SIAM J. on Optimization},
	month = mar,
	pages = {631-–657},
	numpages = {27},
	keywords = {multicriteria optimization, multiobjective optimization, trade-off curve, Pareto set}
}

@inproceedings{Alshahwan2018,
	author = {Alshahwan, Nadia and Gao, Xinbo and Harman, Mark and Jia, Yue and Mao, Ke and Mols, Alexander and Tei, Taijin and Zorin, Ilya},
	booktitle = {Search-Based Software Engineering. SSBSE 2018.},
	doi = {10.1007/978-3-319-99241-9_1},
	publisher = {Springer},
	series = {LNCS},
	title = {{Deploying Search Based Software Engineering with Sapienz at Facebook}},
	volume = {11036},
	year = {2018}
}

@inproceedings{Leitner2009,
	title = {On the effectiveness of test extraction without overhead},
	author = {Leitner, Andreas and Pretschner, Alexander and Mori, Stefan and Meyer, Bertrand and Oriol, Manuel},
	booktitle = {2009 International Conference on Software Testing Verification and Validation},
	pages = {416--425},
	year = {2009},
	organization = {IEEE},
	doi = {10.1109/ICST.2009.30}
}

@article{conover1981rank,
	author = { W. J.   Conover  and  Ronald L.   Iman },
	title = {Rank Transformations as a Bridge between Parametric and Nonparametric Statistics},
	journal = {The American Statistician},
	volume = {35},
	number = {3},
	pages = {124-129},
	year = {1981},
	publisher = {Taylor & Francis},
	doi = {10.1080/00031305.1981.10479327}
}

@inproceedings{Arcuri2017b,
	author = {Arcuri, Andrea},
	booktitle = {2017 IEEE International Conference on Software Quality, Reliability and Security (QRS)},
	doi = {10.1109/QRS.2017.11},
	isbn = {978-1-5386-0592-9},
	month = {jul},
	pages = {9--20},
	publisher = {IEEE},
	title = {{RESTful API Automated Test Case Generation}},
	year = {2017}
}

@inproceedings{vivanti2013search,
	title = {Search-based data-flow test generation},
	author = {Vivanti, Mattia and Mis, Andre and Gorla, Alessandra and Fraser, Gordon},
	booktitle = {2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)},
	pages = {370--379},
	year = {2013},
	organization = {IEEE}
}

@article{jan2019search,
	title = {Search-based multi-vulnerability testing of XML injections in web applications},
	author = {Jan, Sadeeq and Panichella, Annibale and Arcuri, Andrea and Briand, Lionel},
	journal = {Empirical Software Engineering},
	pages = {1--34},
	year = {2019},
	publisher = {Springer}
}

@misc{botsingdoc,
	title = {Botsing documentation},
	author = {STAMP},
	year = {2019},
	url = {https://stamp-project.github.io/botsing/}
}

@inproceedings{Nayrolles2016,
	author = {Nayrolles, Mathieu and Hamou-Lhadj, Abdelwahab},
	booktitle = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	doi = {10.1109/SANER.2016.71},
	isbn = {978-1-5090-1855-0},
	month = {mar},
	pages = {649--652},
	publisher = {IEEE},
	title = {{BUMPER: A Tool for Coping with Natural Language Searches of Millions of Bugs and Fixes}},
	year = {2016},
	address = {Suita, Osaka, Japan}
}

@article{Souter2003,
	author = {Souter, A.L. and Pollock, L.L.},
	doi = {10.1109/TSE.2003.1245302},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Souter, Pollock - 2003 - The construction of contextual def-use associations for object-oriented systems.pdf:pdf},
	issn = {0098-5589},
	journal = {IEEE Transactions on Software Engineering},
	mendeley-groups = {Software Testing/Integration Testing},
	month = {nov},
	number = {11},
	pages = {1005--1018},
	title = {{The construction of contextual def-use associations for object-oriented systems}},
	volume = {29},
	year = {2003}
}

@inproceedings{Xuan2015,
	abstract = {Mutation Testing;},
	address = {New York, New York, USA},
	author = {Xuan, Jifeng and Xie, Xiaoyuan and Monperrus, Martin},
	booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2015},
	doi = {10.1145/2786805.2803206},
	isbn = {9781450336758},
	keywords = {Crash reproduction,stack trace,test case mutation},
	pages = {910--913},
	publisher = {ACM Press},
	title = {{Crash reproduction via test case mutation: Let existing test cases help}},
	year = {2015}
}

@inproceedings{Molina2018,
	author = {Molina, Urko Rueda and Kifetew, Fitsum and Panichella, Annibale},
	booktitle = {SBST '18},
	doi = {10.1145/3194718.3194728},
	pages = {22--29},
	publisher = {ACM},
	title = {{Java unit testing tool competition - Sixth Round Urko}},
	year = {2018}
}

@article{Nayrolles2017,
	author = {Nayrolles, Mathieu and Hamou-Lhadj, Abdelwahab and Tahar, Sofi{\`{e}}ne and Larsson, Alf},
	doi = {10.1002/smr.1789},
	eprint = {1408.1293},
	isbn = {9781450330565},
	issn = {20477473},
	journal = {Journal of Software: Evolution and Process},
	keywords = {Conceptual schema,Design pattern detection,Object-relational mapping,Reverse engineering},
	month = {mar},
	number = {3},
	pages = {e1789},
	pmid = {67195556},
	title = {{A bug reproduction approach based on directed model checking and crash traces}},
	volume = {29},
	year = {2017}
}

@article{Silva2012,
	author = {Silva, Sara and Dignum, Stephen and Vanneschi, Leonardo},
	doi = {10.1007/s10710-011-9150-5},
	journal = {Genetic Programming and Evolvable Machines},
	month = {jun},
	number = {2},
	pages = {197--238},
	title = {{Operator equalisation for bloat free genetic programming and a survey of bloat control methods}},
	volume = {13},
	year = {2012}
}

@inproceedings{Coello:2016,
	author = {Coello Coello, Carlos A.},
	title = {Constraint-Handling Techniques Used with Evolutionary Algorithms},
	booktitle = {Proc. of the Genetic and Evolutionary Computation Conference Companion (GECCO Companion)},
	year = {2016},
	isbn = {978-1-4503-4323-7},
	-location = {Denver, Colorado, USA},
	pages = {563--587},
	numpages = {25},
	-url = {http://doi.acm.org/10.1145/2908961.2926986},
	-doi = {10.1145/2908961.2926986},
	acmid = {2926986},
	publisher = {ACM},
	-address = {New York, NY, USA},
	keywords = {constraint-handling techniques, evolutionary algorithms, optimization}
}

@article{Briand2017a,
	author = {Briand, Lionel and Bianculli, Domenico and Nejati, Shiva and Pastore, Fabrizio and Sabetzadeh, Mehrdad},
	doi = {10.1109/MS.2017.3571562},
	issn = {0740-7459},
	journal = {IEEE Software},
	number = {5},
	pages = {72--75},
	title = {{The Case for Context-Driven Software Engineering Research: Generalizability Is Overrated}},
	volume = {34},
	year = {2017}
}

@article{fraser2012whole,
	author = {Fraser, Gordon and Arcuri, Andrea},
	doi = {10.1109/TSE.2012.14},
	isbn = {0098-5589 VO - 39},
	issn = {0098-5589},
	journal = {IEEE Transactions on Software Engineering},
	month = {feb},
	number = {2},
	pages = {276--291},
	publisher = {IEEE},
	title = {{Whole test suite generation}},
	volume = {39},
	year = {2013}
}

@article{Goffi2016,
	abstract = {Test suites should test exceptional behavior to detect faults in error- handling code. However, manually-written test suites tend to neglect exceptional behavior. Automatically-generated test suites, on the other hand, lack test oracles that verify whether runtime exceptions are the expected behavior of the code under test. This paper proposes a technique that automatically creates test oracles for exceptional behaviors from Javadoc comments. The technique uses a combination of natural language processing and run-time instrumentation. Our implementation, Toradocu, can be combined with a test input generation tool. Our experimental evalu- ation shows that Toradocu improves the fault-finding effectiveness of EvoSuite and Randoop test suites by 8{\%} and 16{\%} respectively, and reduces EvoSuite's false positives by 33{\%}. CCS},
	author = {Goffi, Alberto and Gorla, Alessandra and Ernst, Michael D. and Pezz{\`{e}}, Mauro},
	doi = {10.1145/2931037.2931061},
	file = {:Users/pooria/Downloads/p213-goffi.pdf:pdf},
	isbn = {9781450343909},
	keywords = {automatic test oracle,oracle generation,oracle problem,testing},
	pages = {213--224},
	title = {{Automatic generation of oracles for exceptional behaviors}},
	year = {2016}
}

@inproceedings{arcuri2017private,
	title = {Private {API} access and functional mocking in automated unit test generation},
	author = {Arcuri, Andrea and Fraser, Gordon and Just, Ren{\'e}},
	booktitle = {Software Testing, Verification and Validation (ICST), 2017 IEEE International Conference on},
	pages = {126--137},
	year = {2017},
	organization = {IEEE},
	publisher = {{IEEE} Computer Society},
	address = {Tokyo, Japan}
}

@article{Tonella2004c,
	author = {Tonella, Paolo and Ricca, Filippo},
	doi = {10.1002/smr.284},
	issn = {1532-0618},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	month = {jan},
	number = {1-2},
	pages = {103--127},
	publisher = {John Wiley {\&} Sons, Ltd.},
	title = {{Statistical testing of Web applications}},
	volume = {16},
	year = {2004}
}

@article{messac2003normalized,
	title = {The normalized normal constraint method for generating the Pareto frontier},
	author = {Messac, Achille and Ismail-Yahaya, Amir and Mattson, Christopher A},
	journal = {Structural and multidisciplinary optimization},
	volume = {25},
	number = {2},
	pages = {86--98},
	year = {2003},
	publisher = {Springer}
}

@inproceedings{laumanns2002,
	title = {Running time analysis of multi-objective evolutionary algorithms on a simple discrete optimization problem},
	author = {Laumanns, Marco and Thiele, Lothar and Zitzler, Eckart and Welzl, Emo and Deb, Kalyanmoy},
	booktitle = {International Conference on Parallel Problem Solving from Nature},
	pages = {44--53},
	year = {2002},
	organization = {Springer}
}

@book{Wohlin2012,
	address = {Berlin, Heidelberg},
	author = {Wohlin, Claes and Runeson, Per and H{\"{o}}st, Martin and Ohlsson, Magnus C and Regnell, Bj{\"{o}}rn and Wessl{\'{e}}n, Anders},
	doi = {10.1007/978-3-642-29044-2},
	isbn = {978-3-642-29043-5},
	publisher = {Springer Berlin Heidelberg},
	title = {{Experimentation in Software Engineering}},
	year = {2012}
}

@article{Jin1998,
	abstract = {Integration testing is an important part of the$\backslash$ntesting process, but few integration testing$\backslash$ntechniques have been systematically studied or$\backslash$ndefined. The goal of this research is to develop$\backslash$npractical, effective, formalizable, automatable$\backslash$ntechniques for testing of connections between$\backslash$ncomponents during software integration. This paper$\backslash$npresents an integration testing technique that is$\backslash$nbased on couplings between software components. This$\backslash$ntechnique can be used to support integration testing$\backslash$nof software components, and satisfies part of the$\backslash$nFAA's requirements for structural coverage analysis$\backslash$nof software. The coupling-based testing technique is$\backslash$ndescribed, and the coverage criteria for three types$\backslash$nof couplings are defined. Techniques and algorithms$\backslash$nfor developing coverage analyzers to measure the$\backslash$nextent to which a test set satisfies the criteria$\backslash$nare presented, and results from a comparative case$\backslash$nstudy are presented.},
	author = {Jin, Zhenyi and Offutt, A. Jefferson},
	doi = {10.1002/(SICI)1099-1689(1998090)8:3<133::AID-STVR162>3.0.CO;2-M},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Jin, Offutt - 1998 - Coupling-based criteria for integration testing(2).pdf:pdf},
	issn = {0960-0833},
	journal = {Software Testing, Verification and Reliability},
	keywords = {Integration testing,Software coupling,Software testing},
	mendeley-groups = {Software Testing/Integration Testing,Software Testing},
	month = {sep},
	number = {3},
	pages = {133--154},
	title = {{Coupling-based criteria for integration testing}},
	volume = {8},
	year = {1998}
}

@inproceedings{Knowles2001,
	title = {Reducing local optima in single-objective problems by multi-objectivization},
	author = {Knowles, Joshua D and Watson, Richard A and Corne, David W},
	booktitle = {International Conference on Evolutionary Multi-Criterion Optimization},
	pages = {269--283},
	year = {2001},
	organization = {Springer}
}

@inproceedings{harman2007theoretical,
	title = {A theoretical \& empirical analysis of evolutionary testing and hill climbing for structural test data generation},
	author = {Harman, Mark and McMinn, Phil},
	booktitle = {Proceedings of the 2007 international symposium on Software testing and analysis},
	pages = {73--83},
	year = {2007},
	organization = {ACM}
}

@proceedings{DBLP:conf/iwpc/2015,
	editor = {Andrea De Lucia and
		Christian Bird and
		Rocco Oliveto},
	title = {Proceedings of the 2015 {IEEE} 23rd International Conference on Program
		Comprehension, {ICPC} 2015, Florence/Firenze, Italy, May 16-24, 2015},
	publisher = {{IEEE} Computer Society},
	year = {2015},
	timestamp = {Wed, 29 Mar 2017 16:45:25 +0200}
}

@inproceedings{Devroey2016,
	address = {Salvador, Brazil},
	author = {Devroey, Xavier and Perrouin, Gilles and Legay, Axel and Schobbens, Pierre-Yves and Heymans, Patrick},
	booktitle = {Proceedings of the Tenth International Workshop on Variability Modelling of Software-intensive Systems - VaMoS '16},
	doi = {10.1145/2866614.2866627},
	isbn = {9781450340199},
	issn = {16130073},
	month = {jan},
	pages = {89--96},
	publisher = {ACM Press},
	title = {{Search-based Similarity-driven Behavioural SPL Testing}},
	year = {2016}
}

@inproceedings{molina2018java,
	title = {Java unit testing tool competition-sixth round},
	author = {Molina, Urko Rueda and Kifetew, Fitsum and Panichella, Annibale},
	booktitle = {2018 IEEE/ACM 11th International Workshop on Search-Based Software Testing (SBST)},
	pages = {22--29},
	year = {2018},
	organization = {IEEE}
}

@inproceedings{kintis2016analysing,
	title = {Analysing and comparing the effectiveness of mutation testing tools: A manual study},
	author = {Kintis, Marinos and Papadakis, Mike and Papadopoulos, Andreas and Valvis, Evangelos and Malevris, Nicos},
	booktitle = {2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation (SCAM)},
	pages = {147--156},
	year = {2016},
	organization = {IEEE}
}

@misc{rxjava,
	author = {{RxJava}},
	title = {{Reactive Extensions for the JVM}},
	howpublished = {\url{https://github.com/ReactiveX/RxJava}},
	year = {2018},
	note = {[Online; accessed 25-January-2018]}
}

@article{Tretmans2008,
	Author = {Tretmans, Jan},
	Journal = {Formal methods and testing},
	Pages = {1--38},
	Publisher = {Springer},
	Title = {{Model based testing with labelled transition systems}},
	Year = {2008}
}

@misc{commonscollections,
	author = {Apache},
	title = {{Commons Collections}},
	howpublished = {\url{https://commons.apache.org/proper/commons-collections/}},
	year = {2017},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{Bell2013,
	author = {Bell, Jonathan and Sarda, Nikhil and Kaiser, Gail},
	title = {Chronicler: Lightweight Recording to Reproduce Field Failures},
	booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
	series = {ICSE '13},
	year = {2013},
	isbn = {978-1-4673-3076-3},
	pages = {362--371},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA}
}

@InProceedings{Wang2017,
	author = {Qianqian Wang and Yuriy Brun and Alessandro Orso},
	booktitle = {ICST '17},
	title = {Behavioral Execution Comparison: Are Tests Representative of Field Behavior?},
	doi = {10.1109/icst.2017.36},
	publisher = {{IEEE}},
	month = {mar},
	year = {2017}
}

@dataset{evers_bjorn_2020_3894711,
	author = {Evers, Björn and
		Derakhshanfar, Pouria and
		Devroey, Xavier and
		Zaidman, Andy},
	title = {{Unit test generation for common and uncommon 
		behaviors: dataset}},
	month = jun,
	year = 2020,
	publisher = {Zenodo},
	version = {1.0.0},
	doi = {10.5281/zenodo.3894711}
}

@inproceedings{Mariani2016,
	address = {Madrid, Spain},
	author = {Mariani, Thain{\'{a}} and Guizzo, Giovani and Vergilio, Silvia R and Pozo, Aurora T.R.},
	booktitle = {Proceedings of the 2016 on Genetic and Evolutionary Computation Conference - GECCO '16},
	doi = {10.1145/2908812.2908816},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Mariani et al. - 2016 - Grammatical Evolution for the Multi-Objective Integration and Test Order Problem.pdf:pdf},
	isbn = {9781450342063},
	keywords = {evolutionary algorithm,gram-,hyper-heuristic,matical evolution,multi-objective,search based software engineering},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {1069--1076},
	publisher = {ACM Press},
	title = {{Grammatical Evolution for the Multi-Objective Integration and Test Order Problem}},
	year = {2016}
}

@inproceedings{Krka:2010:UDE:1810295.1810324,
	author = {Krka, Ivo and Brun, Yuriy and Popescu, Daniel and Garcia, Joshua and Medvidovic, Nenad},
	title = {Using Dynamic Execution Traces and Program Invariants to Enhance Behavioral Model Inference},
	booktitle = {Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering - Volume 2},
	series = {ICSE '10},
	year = {2010},
	isbn = {978-1-60558-719-6},
	location = {Cape Town, South Africa},
	pages = {179--182},
	numpages = {4},
	doi = {10.1145/1810295.1810324},
	acmid = {1810324},
	publisher = {ACM}
}

@inproceedings{Clause2007,
	author = {Clause, James and Orso, Alessandro},
	title = {A Technique for Enabling and Supporting Debugging of Field Failures},
	booktitle = {Proceedings of the 29th International Conference on Software Engineering},
	series = {ICSE '07},
	year = {2007},
	isbn = {0-7695-2828-7},
	pages = {261--270},
	doi = {10.1109/ICSE.2007.10},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA}
}

@misc{xwiki,
	author = {XWiki},
	title = {{The Advanced Open Source Enterprise and Application Wiki}},
	howpublished = {\url{http://www.xwiki.org/}},
	year = {2018},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{rueda2016unit,
	title = {Unit testing tool competition—round four},
	author = {Rueda, Urko and Just, Ren{\'e} and Galeotti, Juan P and Vos, Tanja EJ},
	booktitle = {2016 IEEE/ACM 9th International Workshop on Search-Based Software Testing (SBST)},
	pages = {19--28},
	year = {2016},
	organization = {IEEE}
}

@misc{dubbo,
	author = {{Dubbo}},
	title = {{A high-performance, java based, open source RPC framework}},
	howpublished = {\url{http://dubbo.io}},
	year = {2018},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{Luo2014,
	author = {Luo, Qingzhou and Hariri, Farah and Eloussi, Lamyaa and Marinov, Darko},
	doi = {10.1145/2635868.2635920},
	booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering - FSE 2014},
	pages = {643--653},
	title = {{An empirical analysis of flaky tests}},
	year = {2014}
}

@article{Soltani2018a,
	author = {Soltani, Mozhan and Panichella, Annibale and {Van Deursen}, Arie},
	doi = {10.1109/TSE.2018.2877664},
	issn = {0098-5589},
	journal = {IEEE Transactions on Software Engineering},
	title = {{Search-Based Crash Reproduction and Its Impact on Debugging}},
	year = {2018}
}

@misc{ant,
	author = {Apache},
	title = {{Ant}},
	howpublished = {\url{http://ant.apache.org/}},
	year = {2017},
	note = {[Online; accessed 25-January-2018]}
}

@inproceedings{FA13challenges,
	title = {Evosuite: On the challenges of test case generation in the real world},
	author = {Fraser, Gordon and Arcuri, Andrea},
	doi = {10.1109/ICST.2013.51},
	booktitle = {Software Testing, Verification and Validation (ICST), 2013 IEEE Sixth International Conference on},
	pages = {362--369},
	year = {2013},
	organization = {IEEE},
	publisher = {{IEEE} Computer Society},
	address = {Luxembourg, Luxembourg}
}

@article{Fraser2014b,
	author = {Fraser, Gordon and Arcuri, Andrea},
	doi = {10.1145/2685612},
	issn = {1049331X},
	journal = {ACM Transactions on Software Engineering and Methodology},
	month = {dec},
	number = {2},
	pages = {1--42},
	publisher = {ACM Press},
	title = {{A large-scale evaluation of automated unit test generation using evosuite}},
	volume = {24},
	year = {2014}
}

@article{Devroey2017b,
	author = {Devroey, Xavier and Perrouin, Gilles and Cordy, Maxime and Samih, Hamza and Legay, Axel and Schobbens, Pierre-Yves and Heymans, Patrick},
	doi = {10.1007/s10270-015-0479-8},
	issn = {1619-1366},
	journal = {Software {\&} Systems Modeling},
	month = {feb},
	number = {1},
	pages = {153--171},
	publisher = {Springer},
	title = {{Statistical prioritization for software product line testing: an experience report}},
	volume = {16},
	year = {2017}
}

@inproceedings{Ghezzi2014,
	address = {Hyderabad, India},
	author = {Ghezzi, Carlo and Pezz{\`{e}}, Mauro and Sama, Michele and Tamburrelli, Giordano},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	doi = {10.1145/2568225.2568234},
	pages = {277--287},
	publisher = {ACM Press},
	series = {ICSE '14},
	title = {{Mining Behavior Models from User-intensive Web Applications}},
	year = {2014}
}

@article{Derakhshanfar2019,
	author = {Soltani, Mozhan and Derakhshanfar, Pouria and Devroey, Xavier and van Deursen, Arie},
	doi = {10.1007/s10664-019-09762-1},
	issn = {1382-3256},
	journal = {Empirical Software Engineering},
	month = {jan},
	number = {1},
	pages = {96--138},
	publisher = {Empirical Software Engineering},
	title = {{A benchmark-based evaluation of search-based crash reproduction}},
	volume = {25},
	year = {2020}
}

@article{McMinn2004,
	abstract = {The use of metaheuristic search techniques for the automatic generation of test data has been a burgeoning interest for many researchers in recent years. Previous attempts to automate the test generation process have been limited, having been constrained by the size and complexity of software, and the basic fact that, in general, test data generation is an undecidable problem. Metaheuristic search techniques offer much promise in regard to these problems. Metaheuristic search techniques are high-level frameworks, which utilize heuristics to seek solutions for combinatorial problems at a reasonable computational cost. To date, metaheuristic search techniques have been applied to automate test data generation for structural and functional testing; the testing of grey-box properties, for example safety constraints; and also non-functional properties, such as worst-case execution time. This paper surveys some of the work undertaken in this field, discussing possible new future directions of research for each of its different individual areas. {\textcopyright} 2004 John Wiley and Sons, Ltd.},
	author = {McMinn, Phil},
	doi = {10.1002/stvr.294},
	issn = {09600833},
	journal = {Software Testing Verification and Reliability},
	keywords = {Automated software test data generation,Evolutionary algorithms,Evolutionary testing,Metaheuristic search,Search-based software engineering,Simulated annealing},
	number = {2},
	pages = {105--156},
	title = {{Search-based software test data generation: A survey}},
	volume = {14},
	year = {2004}
}

@dataset{pouria_derakhshanfar_2019_3673916,
	author = {Pouria Derakhshanfar and
		Xavier Devroey and
		Gilles Perrouin and
		Andy Zaidman and
		Arie van Deursen},
	title = {{Replication package of "Search-based Crash 
		Reproduction using Behavioral Model Seeding"}},
	month = oct,
	year = 2019,
	publisher = {Zenodo},
	version = {1.0},
	doi = {10.5281/zenodo.3673916},
	url = {https://doi.org/10.5281/zenodo.3673916}
}

@inproceedings{Arcuri2014b,
	author = {Arcuri, Andrea and Fraser, Gordon and Galeotti, Juan Pablo},
	booktitle = {Proceedings of the 29th ACM/IEEE international conference on Automated software engineering - ASE '14},
	doi = {10.1145/2642937.2642986},
	isbn = {9781450330138},
	pages = {79--90},
	publisher = {ACM Press},
	title = {{Automated unit test generation for classes with environment dependencies}},
	year = {2014},
	address = {Vasteras, Sweden}
}

@article{Candido2019,
	archivePrefix = {arXiv},
	arxivId = {1912.05878},
	author = {Candido, Jeanderson and Aniche, Maur{\'{i}}cio and van Deursen, Arie},
	eprint = {1912.05878},
	title = {{Contemporary Software Monitoring: A Systematic Literature Review}},
	url = {http://arxiv.org/abs/1912.05878},
	year = {2019}
}

@article{robillard2011,
	title = {A field study of API learning obstacles},
	author = {Robillard, Martin P and Deline, Robert},
	journal = {Empirical Software Engineering},
	volume = {16},
	number = {6},
	pages = {703--732},
	year = {2011},
	publisher = {Springer}
}

@inproceedings{ma2015grt,
	title = {Grt: Program-analysis-guided random testing (t)},
	author = {Ma, Lei and Artho, Cyrille and Zhang, Cheng and Sato, Hiroyuki and Gmeiner, Johannes and Ramler, Rudolf},
	booktitle = {2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	pages = {212--223},
	year = {2015},
	organization = {IEEE}
}

@inproceedings{Inkumsah2008,
	author = {Inkumsah, Kobi and Xie, Tao},
	booktitle = {ASE'08},
	doi = {10.1109/ASE.2008.40},
	month = {sep},
	pages = {297--306},
	publisher = {IEEE},
	title = {{Improving Structural Testing of Object-Oriented Programs via Integrating Evolutionary Testing and Symbolic Execution}},
	year = {2008}
}

@inproceedings{white2015,
	title = {Generating reproducible and replayable bug reports from android application crashes},
	author = {White, Martin and Linares-V{\'a}squez, Mario and Johnson, Peter and Bernal-C{\'a}rdenas, Carlos and Poshyvanyk, Denys},
	booktitle = {2015 IEEE 23rd International Conference on Program Comprehension},
	pages = {48--59},
	year = {2015},
	organization = {IEEE}
}

@article{jensen2004helper,
	title = {Helper-objectives: Using multi-objective evolutionary algorithms for single-objective optimisation},
	author = {Jensen, Mikkel T},
	journal = {Journal of Mathematical Modelling and Algorithms},
	volume = {3},
	number = {4},
	pages = {323--347},
	year = {2004},
	publisher = {Springer}
}

@inproceedings{Chen2018d,
	author = {Chen, Boyuan and Song, Jian and Xu, Peng and Hu, Xing and Jiang, Zhen Ming (Jack)},
	booktitle = {ASE'18},
	doi = {10.1145/3238147.3238214},
	number = {3},
	pages = {305--316},
	publisher = {ACM Press},
	title = {{An automated approach to estimating code coverage measures via execution logs}},
	year = {2018}
}

@inproceedings{Campos2017,
	abstract = {Evolutionary algorithms have been shown to be effective at generating unit test suites optimised for code coverage. While many aspects of these algorithms have been evaluated in detail (e.g., test length and different kinds of techniques aimed at improving performance, like seeding), the influence of the specific algorithms has to date seen less attention in the literature. As it is theoretically impossible to design an algorithm that is best on all possible problems, a common approach in software engineering problems is to first try a Genetic Algorithm, and only afterwards try to refine it or compare it with other algorithms to see if any of them is more suited for the addressed problem. This is particularly important in test generation, since recent work suggests that random search may in practice be equally effective, whereas the reformulation as a many-objective problem seems to be more effective. To shed light on the influence of the search algorithms, we empirically evaluate six different algorithms on a selection of non-trivial open source classes. Our study shows that the use of a test archive makes evolutionary algorithms clearly better than random testing, and it confirms that the many-objective search is the most effective.},
	address = {Cham},
	author = {Campos, Jos{\'{e}} and Ge, Yan and Fraser, Gordon and Eler, Marcelo and Arcuri, Andrea},
	booktitle = {Symposium on Search Based Software Engineering (SSBSE '17)},
	doi = {10.1007/978-3-319-66299-2_3},
	editor = {Menzies, Tim and Petke, Justyna},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Campos et al. - 2017 - An empirical evaluation of evolutionary algorithms for test suite generation.pdf:pdf},
	isbn = {9783319662985},
	issn = {16113349},
	pages = {33--48},
	publisher = {Springer International Publishing},
	series = {LNCS},
	title = {{An empirical evaluation of evolutionary algorithms for test suite generation}},
	volume = {10452},
	year = {2017}
}

@inproceedings{Holler2012,
	author = {Christian Holler and Kim Herzig and Andreas Zeller},
	title = {Fuzzing with Code Fragments},
	booktitle = {Presented as part of the 21st {USENIX} Security Symposium ({USENIX} Security 12)},
	year = {2012},
	isbn = {978-931971-95-9},
	address = {Bellevue, WA},
	pages = {445--458},
	publisher = {{USENIX}}
}

@inproceedings{Guizzo2015,
	address = {Madrid, Spain},
	author = {Guizzo, Giovani and Fritsche, Gian Mauricio and Vergilio, Silvia Regina and Pozo, Aurora Trinidad Ramirez},
	booktitle = {Proceedings of the 2015 on Genetic and Evolutionary Computation Conference - GECCO '15},
	doi = {10.1145/2739480.2754725},
	file = {:Users/xavierdevroey/Dropbox/These/Articles/Guizzo et al. - 2015 - A Hyper-Heuristic for the Multi-Objective Integration and Test Order Problem.pdf:pdf},
	isbn = {9781450334723},
	mendeley-groups = {Software Testing/Integration Testing},
	pages = {1343--1350},
	publisher = {ACM Press},
	title = {{A Hyper-Heuristic for the Multi-Objective Integration and Test Order Problem}},
	year = {2015}
}

@mastersthesis{Evers2020,
	author = {Evers, Bj{\"{o}}rn},
	school = {Delft University of Technology},
	title = {{Unit test generation for common and uncommon behaviors}},
	type = {master thesis},
	url = {http://resolver.tudelft.nl/uuid:6d8a1835-9054-4e4a-a85f-99ac592978da},
	year = {2020}
}

@article{derakhshanfar2020integ,
	title = {Towards Integration-Level Test Case Generation Using Call Site Information},
	author = {Derakhshanfar, Pouria and Devroey, Xavier and Panichella, Annibale and Zaidman, Andy and van Deursen, Arie},
	journal = {arXiv preprint arXiv:2001.04221},
	year = {2020}
}

@inproceedings{zhou2017,
	title = {Analyzing APIs documentation and code to detect directive defects},
	author = {Zhou, Yu and Gu, Ruihang and Chen, Taolue and Huang, Zhiqiu and Panichella, Sebastiano and Gall, Harald},
	booktitle = {Proceedings of the 39th International Conference on Software Engineering},
	pages = {27--37},
	year = {2017},
	organization = {IEEE Press}
}

@misc{botsing,
	address = {Delft, The Netherlands},
	author = {Derakhshanfar, Pouria},
	publisher = {Delft University of Technology},
	title = {{Botsing}},
	url = {https://stamp-project.github.io/botsing/},
	year = {2020}
}

@inproceedings{Levenshtein1966,
	author = {Levenshtein, Vladimir},
	booktitle = {Soviet Physics Doklady},
	number = {8},
	pages = {707--710},
	title = {{Binary codes capable of correcting deletions, insertions, and reversals}},
	volume = {10},
	year = {1966}
}

@inproceedings{Toffola2017,
	author = {Toffola, Luca Della and Staicu, Cristian-Alexandru and Pradel, Michael},
	booktitle = {2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	doi = {10.1109/ASE.2017.8115617},
	isbn = {978-1-5386-2684-9},
	month = {oct},
	pages = {44--49},
	publisher = {IEEE},
	title = {{Saying ‘Hi!' is not enough: Mining inputs for effective test generation}},
	year = {2017}
}

@article{arcuri2019restful,
	title = {{REST}ful {API} automated test case generation with EvoMaster},
	author = {Arcuri, Andrea},
	journal = {ACM Transactions on Software Engineering and Methodology (TOSEM)},
	volume = {28},
	number = {1},
	pages = {1--37},
	year = {2019},
	publisher = {ACM New York, NY, USA}
}

@inproceedings{panichella2017java,
	title = {Java unit testing tool competition-fifth round},
	author = {Panichella, Annibale and Molina, Urko Rueda},
	booktitle = {2017 IEEE/ACM 10th International Workshop on Search-Based Software Testing (SBST)},
	pages = {32--38},
	year = {2017},
	organization = {IEEE}
}

@incollection{Cabral2007,
	address = {Berlin, Heidelberg},
	author = {Cabral, Bruno and Marques, Paulo},
	booktitle = {ECOOP 2007 – Object-Oriented Programming},
	doi = {10.1007/978-3-540-73589-2_8},
	isbn = {978-3-540-73588-5},
	issn = {0302-9743},
	pages = {151--175},
	publisher = {Springer Berlin Heidelberg},
	title = {{Exception Handling: A Field Study in Java and .NET}},
	volume = {4609},
	year = {2007}
}

@article{Salahirad2019,
	author = {Salahirad, Alireza and Almulla, Hussein and Gay, Gregory},
	doi = {10.1002/stvr.1701},
	journal = {STVR},
	month = {jun},
	number = {4-5},
	pages = {e1701},
	title = {{Choosing the fitness function for the job: Automated generation of test suites that detect real faults}},
	volume = {29},
	year = {2019}
}

@inproceedings{just2014mutants,
	title = {Are mutants a valid substitute for real faults in software testing?},
	author = {Just, Ren{\'e} and Jalali, Darioush and Inozemtseva, Laura and Ernst, Michael D and Holmes, Reid and Fraser, Gordon},
	booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages = {654--665},
	year = {2014},
	organization = {ACM}
}

@incollection{wei2012branch,
	title = {Is branch coverage a good measure of testing effectiveness?},
	author = {Wei, Yi and Meyer, Bertrand and Oriol, Manuel},
	booktitle = {Empirical Software Engineering and Verification},
	pages = {194--212},
	year = {2012},
	publisher = {Springer}
}

@article{Vargha2000,
	author = {Vargha, Andr{\'{a}}s and Delaney, Harold D.},
	doi = {10.3102/10769986025002101},
	journal = {Journal of Educational and Behavioral Statistics},
	month = {jun},
	number = {2},
	pages = {101--132},
	title = {{A Critique and Improvement of the CL Common Language Effect Size Statistics of McGraw and Wong}},
	volume = {25},
	year = {2000}
}

@inproceedings{bertolino2007software,
  title={Software testing research: Achievements, challenges, dreams},
  author={Bertolino, Antonia},
  booktitle={Future of Software Engineering (FOSE'07)},
  pages={85--103},
  year={2007},
  organization={IEEE}
}